<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>20-22年安全四大关于Android的论文简要解读</title>
    <link href="/2021/12/22/20-22%E5%B9%B4%E5%AE%89%E5%85%A8%E5%9B%9B%E5%A4%A7%E5%85%B3%E4%BA%8EAndroid%E7%9A%84%E8%AE%BA%E6%96%87%E7%AE%80%E8%A6%81%E8%A7%A3%E8%AF%BB/"/>
    <url>/2021/12/22/20-22%E5%B9%B4%E5%AE%89%E5%85%A8%E5%9B%9B%E5%A4%A7%E5%85%B3%E4%BA%8EAndroid%E7%9A%84%E8%AE%BA%E6%96%87%E7%AE%80%E8%A6%81%E8%A7%A3%E8%AF%BB/</url>
    
    <content type="html"><![CDATA[<p>想起来读一读近两年关于安卓的顶会，学习下方向什么的，这也算是最近几天的劳动成果了。</p><p><img src="/img/20-22dkhvanvolywf/%E6%88%AA%E5%9B%BE20211222202402.png" alt="最近下载的论文"></p><h2 id="IEEE-Symposium-on-Security-and-Privacy"><a href="#IEEE-Symposium-on-Security-and-Privacy" class="headerlink" title="IEEE Symposium on Security and Privacy"></a><a href="https://www.ieee-security.org/TC/SP2022/">IEEE Symposium on Security and Privacy</a></h2><h3 id="s-amp-p-22"><a href="#s-amp-p-22" class="headerlink" title="s&amp;p 22"></a>s&amp;p 22</h3><p>Exploit the Last Straw That Breaks Android Systems（张源）</p><blockquote><p>通过深入data storing process发现针对安卓系统的新的DoS攻击，设计StrawFuzzer<br>The Android system services usually play a critical role in running multiple important tasks, and delivering seamless user experiences, e.g., conveniently storing user data. In this paper, we conduct the ﬁrst systematic security study on the <strong>data storing process</strong> in Android system services, and consequently discover a novel class of design ﬂaws (named Straw), which can <strong>lead to serious DoS (Denial-of-Service) attacks</strong>, e.g., permanently crashing the whole victim Android device.<br>Then we propose a novel directed fuzzing based approach, called StrawFuzzer, to automatically vet all system services against the straw vulnerabilities. StrawFuzzer balances the tradeoff between path exploration and vulnerability exploitation. By applying StrawFuzzer on three Android systems with the latest security updates, we identiﬁed 35 unique straw vulnerabilities affecting 474 interfaces across 77 system services and successfully generated corresponding exploits, which can be used to conduct various permanent/temporary DoS attacks. We have reported our ﬁndings with suggestions for repairing the vulnerabilities to corresponding vendors. Up to now, Google has rated our vulnerability as high severity.</p></blockquote><p>Evaluating Physical-Layer BLE Location Tracking Attacks on Mobile Devices</p><blockquote><p>通过物理层缺陷形成的指纹绕过蓝牙反追踪加密进行追踪<br>Abstract—Mobile   devices   increasingly   function   as   wireless <strong>tracking  beacons</strong>.  Using  the Bluetooth  Low  Energy  (BLE)  protocol,  mobile  devices  such  as  smartphones  and smartwatches continuously  transmit  beacons  to  inform  passive  listeners  about device locations  for  applications  such  as  digital  contact  tracing for COVID-19, and even finding lost devices. These applications use  cryptographic  anonymity  that  limit  an  adversary’s ability to  use  these  beacons  to  stalk  a  user.  However,  <strong>attackers  can bypass these defenses by fingerprinting the unique physical-layer imperfections</strong> in the transmissions of specific devices.<br>We  empirically  demonstrate  that  there  are  several  key  challenges that can limit an attacker’s ability to find a stable physical layer  identifier  to  uniquely  identify  mobile devices  using  BLE, including  variations  in  the  hardware  design  of  BLE  chipsets, transmission power levels, differences in thermal conditions, and limitations  of  inexpensive radios  that  can  be  widely  deployed to  capture  raw  physical-layer  signals. <strong>We  evaluated how  much each of these factors limits accurate fingerprinting</strong> in a large-scale field  study  of hundreds  of  uncontrolled  BLE  devices,  <strong>revealing that physical-layer identification is a viable</strong>, although sometimes unreliable, way for an attacker to track mobile devices.</p></blockquote><h3 id="s-amp-p-21"><a href="#s-amp-p-21" class="headerlink" title="s&amp;p 21"></a>s&amp;p 21</h3><p>How Did That Get In My Phone? Unwanted App Distribution on Android Devices</p><blockquote><p>调查：PUP(potentially unwanted programs) apk的来源，play store占大头…<br>Android is the most popular operating system with billions of active devices. Unfortunately, its popularity and openness makes it attractive for unwanted apps, i.e., malware and <strong>potentially unwanted programs</strong> (PUP). In Android, app installations typically happen via the official and alternative markets, but also via other smaller and less understood alternative distribution vectors such as Web downloads, pay-per-install (PPI) services, backup restoration, bloatware, and IM tools. This work performs a thorough <strong>investigation on unwanted app distribution</strong> by quantifying and comparing distribution through different vectors. At the core of our <strong>measurements</strong> are reputation logs of a large security vendor, which include 7.9M apps observed in 12M devices between June and September 2019. As a first step, we measure that between 10% and 24% of users devices encounter at least one unwanted app, and compare the prevalence of malware and PUP. An analysis of the who-installs-who relationships between installers and child apps reveals that the <strong>Play market is the main app distribution vector, responsible for 87% of all installs and 67% of unwanted app installs</strong>, but it also has the best defenses against unwanted apps. Alternative markets distribute instead 5.7% of all apps, but over 10% of unwanted apps. Bloatware is also a significant unwanted app distribution vector with 6% of those installs. And, backup restoration is an unintentional distribution vector that may even allow unwanted apps to survive users’ phone replacement. We estimate unwanted app distribution via PPI to be smaller than on Windows. Finally, we observe that Web downloads are rare, but provide a riskier proposition even compared to alternative markets.</p></blockquote><p>Android Custom Permissions Demystified:From Privilege Escalation to Design Shortcomings</p><blockquote><p>关注到custom permission，这个东西可以分享资源、权限给其它应用，通过设计一吨cases挨个触发privilege escalation的fuzzer，寻找这些custom permission<br>Permission is the fundamental security mechanism for protecting user data and privacy on Android. Given its importance, security researchers have studied the design and usage of permissions from various aspects. However, most of the previous research focused on the security issues of system permissions. Overlooked by many researchers, <strong>an app can use custom permissions to share its resources and capabilities with other apps</strong>. However, the security implications of using custom permissions have not been fully understood.In this paper, we systematically evaluate the <strong>design and implementation of Android custom permissions</strong>. Notably, we built an automatic fuzzing tool, called CuPerFuzzer, to detect custom permissions related vulnerabilities existing in the Android OS. CuPerFuzzer treats the operations of the permission mechanism as a black-box and executes massive targeted test cases to <strong>trigger privilege escalation</strong>. In the experiments, CuPerFuzzer discovered 2,384 effective cases with 30 critical paths successfully. Through investigating these vulnerable cases and analyzing the source code of Android OS, we further identified a series of severe design shortcomings lying in the Android permission framework, including dangling custom permission, inconsistent permission-group mapping, custom permission elevating, and inconsistent permission definition. Exploiting any of these shortcomings, a malicious app can obtain dangeroussystem permissions without user consent and further access unauthorized platform resources. On top of these observations, we propose some general design guidelines to secure custom permissions. Our findings have been acknowledged by the Android security team and rated as High severity.</p></blockquote><p>Trust, But Verify: A Longitudinal Analysis of Android OEM Compliance and Customization</p><blockquote><p>针对OEM对AOSP的CDD（为了限制OEM的customization的条例）遵守程度展开分析，large-scale<br>Abstract—Nowadays, more than two billions of mobile devices run Android OS. At the core of this success are the open source nature of the Android Open Source Project and vendors’ ability to customize the code base and ship it on their own devices. While the possibility of customizations is beneficial to vendors, they can potentially lead to compatibility and security problems. To prevent these problems, Google developed a set of requirements that must be satisfied for a vendor to brand its devices as “Android,” and recently introduced Project Treble as an effort to partition vendor customizations. These requirements are encoded as part of a textual document (called Compatibility Definition Document, or CDD) and various automated tests. This paper performs the first longitudinal study on Android OEM customizations. We first built a dataset of 2,907 ROMs, spanning across 42 different vendors, and covering Android versions from 1.6 to 9.0 (years 2009–2020). We then developed an analysis framework and pipeline to extract each ROM’s customization layers and evaluate it across severalmetrics. For example, we analyze ROMs to determine whether they are compliant with respect to the various requirements and whether their customizations negatively affect the security posture of the overall device. In the process, we focus on various aspects, ranging from security hardening of binaries, SELinux policies, Android init scripts, and kernel security hardening techniques. Our results are worrisome.We found 579 over 2,907 (20%) of the ROMs have at least one violation for the CDD related to their Android version — incredibly, 11 of them are branded by Google itself. Some of our findings suggest that vendors often go out of theirway to bypass or “comment out” safety nets added by the Android security team. In other cases, we found ROMs that modify init scripts to launch at boot outdated versions (with known CVEs and public POCs) of programs as root and reachable from a remote attacker (e.g., tcpdump). This paper shows that Google’s efforts are not enough, and we offer several recommendations on how to improve the compliance check pipelines.</p></blockquote><p>sp’21 Trouble Over-The-Air An Analysis of FOTA Apps in the Android Ecosystem</p><blockquote><p>pre-install app<br>OEM厂商的FOTA有问题，large-scale的分析FOTA生态，发现了某些FOTAprivacy intrusive、或者存在使用开源的test key进行签名的漏洞<br>Abstract—Android firmware updates are typically managed by the so-called <strong>FOTA (Firmware Over-the-Air) apps</strong>. Such apps are highly privileged and play a critical role in maintaining devices secured and updated. The Android operating system offers standard mechanisms—available to Original Equipment Manufacturers (OEMs)—to implement their own FOTA apps but such vendor-specific implementations could be a source of security and privacy issues due to poor software engineering practices. This paper performs the first large-scale and systematic analysis of the FOTA ecosystem through a dataset of 2,013 FOTA apps detected with a tool designed for this purpose over 422,121 pre-installed apps. We classify the different stakeholders developing and deploying FOTA apps on the Android update ecosystem, showing that 43% of FOTA apps are developed by third parties. We report that some devices can have as many as 5 apps implementing FOTA capabilities. By means of static analysis of the code of FOTA apps, we show that some apps present behaviors that can be considered privacy intrusive, such as the collection of sensitive user data (e.g., geolocation linked to unique hardware identifiers), and a significant presence of third-party trackers. We also discover implementation issues leading to critical vulnerabilities, such as the use of public AOSP test keys both for signing FOTA apps and for update verification, thus allowing any update signed with the same key to be installed. Finally, we study telemetry data collected from real devices by a commercial security tool. We demonstrate that FOTA apps are responsible for the installation of non-system apps (e.g., entertainment apps and games), including malware and Potentially Unwanted Programs (PUP). Our findings suggest that FOTA development practices are misaligned with Google’s recommendations.</p></blockquote><p>sp’21 Happer Unpacking Android Apps via a Hardware-Assisted Approach（亚金）</p><blockquote><p>新型脱壳器：先观察行为再选择方法脱壳<br>Abstract—Malware authors are abusing packers (or runtimebased obfuscators) to protect malicious apps from being analyzed. Although many unpacking tools have been proposed, they can be easily impeded by the anti-analysis methods adopted by the packers, and they <strong>fail to effectively collect the hidden Dex data</strong> due to the evolving protection strategies of packers. Consequently, many packing behaviors are unknown to analysts and packed malware can circumvent the inspection. To fill the gap, in this paper, we propose a novel hardware-assisted approach that first <strong>monitors the packing behaviors</strong> and then <strong>selects the proper approach to unpack the packed apps</strong>. Moreover, we develop a prototype named Happer with a domain-specific language named behavior description language (BDL) for the ease of extending Happer after tackling several technical challenges. We conduct extensive experiments with 12 commercial Android packers and more than 24k Android apps to evaluate Happer. The results show that Happer observed 27 packing behaviors, 17 of which have not been elaborated by previous studies. Based on the observed packing behaviors, Happer adopted proper approaches to collect all the hidden Dex data and assembled them to valid Dex files.</p></blockquote><h3 id="s-amp-p-20"><a href="#s-amp-p-20" class="headerlink" title="s&amp;p 20"></a>s&amp;p 20</h3><p>An Analysis of Pre-installed Android Software</p><blockquote><p>large-scale的预装应用分析: 隐私侵犯、后门…<br>The open-source nature of the Android OS makes it possible for manufacturers to ship custom versions of the OS along with a set of pre-installed apps, often for product differentiation. Some device vendors have recently come under scrutiny for potentially invasive private data collection practices and other potentially harmful or unwanted behavior of the preinstalled apps on their devices. Yet, the landscape of preinstalled software in Android has largely remained unexplored, particularly in terms of the security and privacy implications of such customizations. In this paper, we present the first largescale study of pre-installed software on Android devices from more than 200 vendors. Our work relies on a large dataset of real-world Android firmware acquired worldwide using crowd-sourcing methods. This allows us to answer questions related to the stakeholders involved in the supply chain, from device manufacturers and mobile network operators to thirdparty organizations like advertising and tracking services, and social network platforms. Our study allows us to also uncover relationships between these actors, which seem to revolve primarily around advertising and data-driven services. Overall, the supply chain around Android’s open source model lacks transparency and has facilitated potentially harmful behaviors and backdoored access to sensitive data and services without user consent or awareness. We conclude the paper with recommendations to improve transparency, attribution, and accountability in the Android ecosystem.</p></blockquote><p><strong>TextExerciser: Feedback-driven Text Input Exercising for Android Applications</strong></p><blockquote><p>动态分析工具的辅助工具，以往安卓动态分析的障碍包括text-input区，这个东西的长度、字符要求限制了代码覆盖率，这个work就是在这方面的工作<br>Dynamic analysis of Android apps is often used together with an exerciser to increase its <strong>code coverage</strong>. One big obstacle in designing such Android app exercisers comes from the existence of text-based inputs, which are often constrained by the nature of the input field, such as the <strong>length and character restrictions</strong>.In this paper, we propose TextExerciser, an iterative, feedback-driven text input exerciser, which generates text inputs for Android apps. Our key insight is that Android apps often provide feedback, called hints, for malformed inputs so that our system can utilize such hints to improve the input generation.We implemented a prototype of TextExerciser and evaluated it by comparing TextExerciser with state-of-the-art exercisers, such as The Monkey and DroidBot. Our evaluation shows that TextExerciser can achieve significantly higher code coverage and trigger more sensitive behaviors than these tools. We also combine TextExerciser with dynamic analysis tools and show they are able to detect more privacy leaks and vulnerabilities with TextExerciser than with existing exercisers. Particularly, existing tools, under the help of TextExerciser, find several new vulnerabilities, such as one user credential leak in a popular social app with more than 10,000,000 downloads.</p></blockquote><p><strong>Ex-vivo dynamic analysis framework for Android device drivers</strong></p><blockquote><p>瞄准了一个困难点：动态分析框架如果需要设备会受性能限制，如果不需要设备就会需要复杂的硬件模拟，然而作者观察到驱动只是非常浅表地依赖硬件与内核，所以利用这点搞了个不需要porting/emulation的框架<br>The ability to execute and analyze code makes many security tasks such as exploit development, reverse engineering, and vulnerability detection much easier. However, on embedded devices such as Android smartphones, executing code in-vivo, on the device, for analysis is limited by the need to acquire such devices, the speed of the device, and in some cases the need to flash custom code onto the devices. The other option is to execute the code ex-vivo, off the device, but this approach either requires porting or complex hardware emulation. In this paper, we take advantage of the observation that many execution paths in drivers are only superficially dependent on both the hardware and kernel on which the driver executes, to create an ex-vivo dynamic driver analysis framework for Android devices that requires neither porting nor emulation. We achieve this by developing a generic evasion framework that enables driver initialization by evading hardware and kernel dependencies instead of precisely emulating them, and then developing a novel Ex-vivo AnalySIs framEwoRk (EASIER) that enables off-device analysis with the initialized driver state. Compared to on-device analysis, our approach enables the use of userspace tools and scales with the number of available commodity CPU’s, not the number of smartphones. We demonstrate the usefulness of our framework by targeting privilege escalation vulnerabilities in system call handlers in platform device drivers. We find it can load 48/62 (77%) drivers from three different Android kernels: MSM, Xiaomi, and Huawei. We then confirm that it is able to reach and detect 21 known vulnerabilities. Finally, we have discovered 12 new bugs which we have reported and confirmed.</p></blockquote><p><strong>Automatic Uncovering of Hidden Behaviors from Input Validation in Mobile Apps</strong> (林志强 暑期学校有讲座)</p><blockquote><p>观察到app内存在输入框的hidden-behavior，设计自动化工具去large-scale寻找。然后给150k应用做了测试，发现了12k有后门密码，4k有blacklist<br>Mobile applications (apps) have exploded in popularity, with billions of smartphone users using millions of apps available through markets such as the Google Play Store or the Apple App Store. While these apps have rich and useful functionality that is publicly exposed to end users, they also contain <strong>hidden behaviors</strong> that are not disclosed, such as backdoors and blacklists designed to block unwanted content. In this paper, we show that the input validation behavior-the way the mobile apps process and respond to data entered by users-can serve as a powerful tool for uncovering such hidden functionality. We therefore have developed a tool, InputScope, that automatically detects both the execution context of user input validation and also the content involved in the validation, to automatically expose the secrets of interest. We have tested InputScope with over 150,000 mobile apps, including popular apps from major app stores and preinstalled apps shipped with the phone, and found 12,706 mobile apps with backdoor secrets and 4,028 mobile apps containing blacklist secrets.</p></blockquote><p>点：应用检测到风险如何限制用户无法继续使用，比如citibank的限制可以通过简单的方法绕过</p><h2 id="The-ACM-Conference-on-Computer-and-Communications-Security-CCS"><a href="#The-ACM-Conference-on-Computer-and-Communications-Security-CCS" class="headerlink" title="The ACM Conference on Computer and Communications Security (CCS)"></a>The <em>ACM</em> Conference on Computer and Communications Security (<em>CCS</em>)</h2><h3 id="ccs-21"><a href="#ccs-21" class="headerlink" title="ccs 21"></a>ccs 21</h3><p>This Sneaky Piggy Went to the Android Ad Market: Misusing Mobile Sensors for Stealthy Data Exfiltration</p><blockquote><p>关注安卓传感器，提出一种基于广告生态的利用传感器的攻击，并且通过large-scale的survey发现已经有通过传感器进行access privacy的情况<br>Mobile sensors have transformed how users interact with modern smartphones and enhance their overall experience. However, the absence of sufficient access control for protecting these sensors enables a plethora of threats. As prior work has shown, malicious apps and sites can deploy a wide range of attacks that use data captured from sensors. Unfortunately, as we demonstrate, in the modern app ecosystem where most apps fetch and render third-party web content, <strong>attackers can use ads for delivering attacks</strong>.<br>In this paper, we introduce a novel attack vector that misuses the advertising ecosystem for delivering sophisticated and stealthy attacks that leverage mobile sensors. These attacks do not depend on any special app permissions or specific user actions, and affect all Android apps that contain in-app advertisements due to the improper access control of sensor data in WebView. We outline how motion sensor data can be used to infer users’ sensitive touch input (e.g., credit card information) in two distinct attack scenarios, namely intra-app and inter-app data exfiltration. While the former targets the app displaying the ad, the latter affects every other Android app running on the device. To make matters worse, we have <strong>uncovered serious flaws in Android’s app isolation, life cycle management, and access control mechanisms</strong> that enable persistent data exfiltration even after the app showing the ad is moved to the background or terminated by the user. Furthermore, as in-app ads can “piggyback” on the permissions intended for the app’s core functionality, they can also obtain information from protected sensors such as the camera, microphone and GPS. To provide a comprehensive assessment of this emerging threat, we conduct a <strong>large-scale</strong>, end-to-end, dynamic analysis of ads shown in apps available in the official Android Play Store. Our study reveals that ads in the wild are already <strong>accessing and leaking data obtained from motion sensors</strong>, thus highlighting the need for stricter access control policies and isolation mechanisms.</p></blockquote><p>Towards Transparent and Stealthy Android OS Sandboxing via Customizable Container-Based Virtualization</p><blockquote><p>container-based的虚拟化兼顾隔离与好性能，而hypervisor的在资源限制的设备上不可行，app-level的隔离不行<br>并且现有的不提供transparency or stealthiness，为了分析恶意软件必须不让其检测到在虚拟化中<br>A fast-growing demand from smartphone users is mobile virtualization.This technique supports running separate instances of virtual phone environments on the same device. In this way, users can run multiple copies of the same app simultaneously,and they can also run an untrusted app in an isolated virtual phone without causing damages to other apps. Traditional <strong>hypervisor-based virtualization is impractical to resource-constrained mobile devices</strong>. Recent app-level virtualization efforts suffer from the <strong>weak isolation mechanism</strong>. In contrast, container-based virtualization offers an isolated virtual environment with superior performance.However, existing Android containers do not meet the anti-evasion requirement for security applications: their designs are inherently incapable of providing transparency or stealthiness.<br>In this paper, we present VPBox, a novel Android OS-level sandbox framework via container-based virtualization. We integrate the principle of anti-virtual-machine detection into VPBox’s design from two aspects.First, we improve the state-of-the-art Android container work significantly for transparency.We are the first to offer complete device virtualization on mainstream Android versions.To minimize the fingerprints of VPBox’s presence, we enable all virtualization components (i.e., kernel-level device and user level device virtualization) to be executed outside of virtual phones (VPs).Second, we offer new functionality that security analysts can customize device artifacts (e.g., phone model, kernel version, and hardware profiles) without user-level hooking. This capability prevents the tested apps from detecting the particular mobile device (e.g., Google Pixel phone) that runs an Android container.Our performance evaluation on five VPs shows that VPBox runs different benchmark apps at native speed.Compared with other Android sandboxes, VPBox is the only one that can bypass a set of virtual environment detection heuristics. At last, we demonstrate VPBox’s flexibility in testing environment-sensitive malware that tries to evade sandboxes.</p></blockquote><p>Android on PC: On the Security of End-user Android Emulators</p><blockquote><p>关注到安卓虚拟机带来：通讯认证、权限管理、开放接口 三个方面的问题    ，然后survey市面上的六款虚拟器<br>Android emulators today are not only acting as a debugging tool for developers but also serving the massive end-users. These end user Android emulators have attracted millions of users due to their advantages of running mobile apps on desktops and are especially appealing for mobile game players who demand larger screens and better performance. Besides, they commonly provide some customized assistant functionalities to improve the user experience, such as keyboard mapping and app installation from the host. To implement these services, emulators inevitably <strong>introduce communication channels between host OS and Android OS</strong> (in the Virtual Machine), thus forming a unique architecture which mobile phone does not have. However, it is unknown whether this architecture brings any new security risks to emulators.<br>This paper performed a systematic study on end-user Android emulators and discovered a series of security flaws on <strong>communication channel authentication</strong>, <strong>permission control, and open interfaces</strong>. Attackers could exploit these flaws to bypass Android security mechanisms and escalate their privileges inside emulators, ultimately invading users’ privacy, such as stealing valuable game accounts and credentials. To understand the impact of our findings, we studied six popular emulators and measured their flaws. The results showed that the issues are pervasive and could cause severe security consequences. We believe our work just shows the tip of the iceberg, and further research can be done to improve the security of this ecosystem.</p></blockquote><p>Dissecting Residual APIs in Custom Android ROMs</p><blockquote><p>关注OEM厂商ROM API冗余问题，开头就指出冗余带来漏洞，large-scale，<br>怎么定位的“冗余”？<br>Many classic software vulnerabilities (e.g., Heartbleed) are <strong>rooted in unused code</strong>. In this work, we aim to understand whether unused Android functionality may similarly open unnecessary attack opportunities. Our study focuses on OEM-introduced APIs, which are added and removed erratically through different device models and releases. This instability contributes to the production of bloated custom APIs, some of which may not even be used on a particular device. We call such unused APIs Residuals.<br>In this work, we conduct the first large-scale investigation of custom Android Residuals to understand whether they may lead to access control vulnerabilities. Our investigation is driven by the intuition that it is challenging for vendor developers to ensure proper protection of Residuals. Since they are deemed unnecessary, <strong>Residuals are naturally overlooked during integration and maintenance.</strong> This is particularly exacerbated by the complexities of Android’s ever-evolving access control mechanism.<br>To facilitate the study at large, we propose a set of analysis techniques that <strong>detect and evaluate Residuals’ access control enforcement.</strong> Our techniques feature a synergy between application and framework program analysis to <strong>recognize potential Residuals in specially curated ROM samples</strong>. The Residual implementations are then statically analyzed to <strong>detect potential evolution-induced access control vulnerabilities</strong>. Our study reveals that Residuals are prevalent among OEMs. More importantly, we find that their presence may even lead to security-critical vulnerabilities.</p></blockquote><p>Ghost in the Binder: Binder Transaction Redirection Attacks in Android System Services</p><blockquote><p>#star   以前的BInder防护都只关注system作为server，作者关注到system作为aidl client的事情，然后 假设攻击者提供一个系统服务transact with a customized Binder server and then <strong>attacks from the Binder server</strong><br>system作为client我之前就知道啊<br>这个attack能达到什么效果？以前的防护是？<br>Binder, the main mechanism for Android applications to access system services, adopts a client-server role model in its design, assuming the system service as the server and the application as the client. However, a growing number of scenarios require the system service to act as a Binder client and to send queries to a Binder server possibly instantiated by the application. Departing from this role-reversal possibility, this paper proposes the Binder Transaction Redirection (BiTRe) attacks, where the attacker induces the system service to transact with a customized Binder server and then <strong>attacks from the Binder server</strong>—an often unprotected direction. We demonstrate the scale of the attack surface by enumerating the utilizable Binder interfaces in BiTRe, and discover that the attack surface grows with the Android release version. In Android 11, more than 70% of the Binder interfaces are affected by or can be utilized in BiTRe. We prove the attacks’ feasibility by (1) constructing a prototype system that can automatically generate executable programs to reach a substantial part of the attack surface, and (2) identifying a series of vulnerabilities, which are acknowledged by Google and assigned ten CVEs.</p></blockquote><p>Structural Attack against Graph Based Android Malware Detection</p><blockquote><p>对抗基于图的安卓恶意软件识别<br>large-scale，修改function call达到目的<br>还提出了between feature-space attacks and problem-space attacks<br>扰乱了分类器，但不一定能逃逸？一个是变化 一个是定向变化？？？<br>Malware detection techniques achieve great success with deeper insight into the semantics of malware. Among existing detection techniques, <strong>function call graph</strong> (FCG) based methods achieve promising performance due to their prominent representations of malware’s functionalities. Meanwhile, recent adversarial attacks <strong>not only perturb feature vectors to deceive classifiers</strong> (i.e., feature-space attacks) <strong>but also investigate how to generate real evasive malware</strong> (i.e., problem-space attacks). However, existing problem-space attacks are <strong>limited due to their inconsistent transformations</strong> between feature space and problem space. In this paper, we propose the first structural attack against graphbased Android malware detection techniques, which <strong>addresses [1] between feature-space attacks and problem-space attacks</strong>. We design a Heuristic optimization model integrated with Reinforcement learning framework to optimize our structural ATtack (HRAT). <strong>HRAT includes four types of graph modifications</strong> (i.e., inserting and deleting nodes, adding edges and rewiring) that correspond to four manipulations on apps (i.e., inserting and deleting methods, adding call relation, rewiring). Through extensive experiments on over 30k Android apps, HRAT demonstrates outstanding attack performance on both feature space (over 90% attack success rate) and problem space (up to 100% attack success rate in most cases). Besides, the experiment results show that combing multiple attack behaviors strategically makes the attack more effective and efficient.</p></blockquote><p>Understanding and Detecting Mobile Ad Fraud Through the Lens of Invalid Traffic (上交 朱浩瑾)</p><blockquote><p>Along with gaining popularity of Real-Time Bidding (RTB) based programmatic advertising, the click farm based invalid tra!c, which leverages massive real smartphones to carry out large-scale ad fraud campaigns, is becoming one of the major threats against online advertisement. In this study, we take an initial step towards the detection and large-scale measurement of the click farm based invalid traffic. Our study begins with a measurement on the device’s features using a real-world labeled dataset, which reveals a series of features distinguishing the fraudulent devices from the benign ones. Based on these features, we develop EvilHunter, a system for detecting fraudulent devices through ad bid request logs with a focus on clustering fraudulent devices. EvilHunter functions by 1) building a classi”er to distinguish fraudulent and benign devices; 2) clustering devices based on app usage patterns; and 3) relabeling devices in clusters through majority voting. EvilHunter demonstrates 97% precision and 95% recall on a real-world labeled dataset. By investigating a super click farm, we reveal several cheating strategies that are commonly adopted by fraudulent clusters. We further reduce the overhead of EvilHunter and discuss how to deploy the optimized EvilHunter in a real-world system. We are in partnership with a leading ad veri”cation company to integrate EvilHunter into their industrial platform.</p></blockquote><h3 id="ccs-20"><a href="#ccs-20" class="headerlink" title="ccs 20"></a>ccs 20</h3><p>Lies in the Air: Characterizing Fake-base-station Spam Ecosystem in China</p><blockquote><p>假基站研究任重道远，large-scale，特征化假基站，从宏观、微观两个层面看，宏观：business类型、时间模式与空间模式，微观：假基站生态怎么组织起来的、欺诈短信怎么组织并逃逸检查的<br>Fake base station (FBS) has been exploited by criminals to attack mobile users by spamming fraudulent messages for over a decade. Despite that prior work has proposed several techniques to mitigate this issue, FBS spam is still a long-standing challenging issue in some countries, such as China, and causes billions of dollars of financial loss every year. Therefore, understanding and exploring the thematic strategies in the FBS spam ecosystem at a large scale would improve the defense mechanisms. In this paper, we present the <strong>first large-scale characterization of FBS spam ecosystem</strong> by collecting three-month real-world FBS detection results. First, <strong>at “macro-level”</strong> we uncover the characteristics of FBS spammers, including their business categories, temporal patterns and spatial patterns. Second, <strong>at “micro-level”</strong>, we investigate how FBS ecosystem is organized and how fraudulent messages are constructed by campaigns to trap users and evade detection. Collectively, the results expand our understanding of the FBS spam ecosystem and provide new insights into improved mitigation mechanisms for the security community.</p></blockquote><p>PDiff: Semantic-based Patch Presence Testing for Downstream Kernels</p><blockquote><p>名字里没有安卓，实际上做的还是安卓…张源组全是这种开源软件补丁相关，包括打没打补丁 补丁打在了哪 什么的<br>Open-source kernels have been adopted by massive downstream vendors on billions of devices. However, these vendors often omit or delay the adoption of patches released in the mainstream version. Evenworse, many vendors are not publicizing the patching progress or even disclosing misleading information. However, patching status is critical for groups (e.g., governments and enterprise users) that are keen to security threats. Such a practice motivates the need for reliable patch presence testing for downstream kernels. Currently, the best means of patch presence testing is to examine the existence of a patch in the target kernel by using the code signature match. However, such an approach cannot address the key challenges in practice. Specifically, downstream vendors widely customize the mainstream code and use non-standard building configurations, which often change the code around the patching sites such that the code signatures are ineffective. In this work, we propose PDiff, a system to perform highly reliable patch presence testing with downstream kernel images. Technically speaking, PDiff generates summaries carrying the semantics related to a target patch. Based on the semantic summaries, PDiff compares the target kernel with its mainstream version before and after the adoption of the patch, preferring the closer reference version to determine the patching status. Unlike previous research on patch presence testing, our approach examines similarity based on the semantics of patches and therefore, provides high tolerance to code-level variations. Our test with 398 kernel images corresponding to 51 patches shows that PDiff can achieve high accuracy with an extremely low rate of false negatives and zero false positives. This significantly outperforms the state-of-theart tool. More importantly, PDiff demonstrates consistently high effectiveness when code customization and non-standard building configurations occur.</p></blockquote><p>Deploying Android Security Updates: an Extensive Study Involving Manufacturers, Carriers, and End Users</p><blockquote><p>ecosystem出现了…fragmented and inconsistent ecosystem<br>关注到安卓delivery of updates的问题，长时间 4年，发现了 中位24天修复，中位11天用户安装的延迟，还评估了谷歌一些项目的作用 比如Google Project Treble<br>有点像 张源的 CCS’20 PDiff，只不过这个是花的时间久，得出一个结论<br>Android’s fragmented ecosystem makes the delivery of security updates and OS upgrades cumbersome and complex. While Google initiated various projects such as Android One, Project Treble, and Project Mainline to address this problem, and other involved entities (e.g., chipset vendors, manufacturers, carriers) continuously strive to improve their processes, it is still unclear how effective these efforts are on the <strong>delivery of updates</strong> to supported end-user devices. In this paper, we perform an extensive quantitative study (Aug. 2015 to Dec. 2019) to measure the Android security updates and OS upgrades rollout process. Our study leverages multiple data sources: the Android Open Source Project (AOSP), device manufacturers, and the top four U.S. carriers (AT&amp;T, Verizon, T-Mobile, and Sprint).<br>Furthermore, we analyze an end-user dataset captured in 2019 (152M anonymized HTTP requests associated with 9.1M unique user identifiers) from a U.S.-based social network.<br>Our findings include unique measurements that, due to the <strong>fragmented and inconsistent ecosystem</strong>, were previously challenging to perform. For example, manufacturers and carriers introduce a median latency of 24 days before rolling out security updates, with an additional median delay of 11 days before end devices update(中位24天修复，中位11天用户安装的延迟？). We show that these values alter per carrier-manufacturer relationship, yet do not alter greatly based on a model’s age. Our results also delve into the effectiveness of current Android projects. For instance, security updates for Treble devices are available on average 7 days faster than for non-Treble devices. While this constitutes an improvement, the security update delay for Treble devices still averages 19 days</p></blockquote><p>Demystifying Resource Management Risks in Emerging Mobile App-in-App Ecosystems</p><blockquote><p>指出app里套app是一个流行的趋势，ecosystem，第一个系统性研究这个生态的资源管理，发现了很多缺陷，为了知道这些缺陷的影响，设计工具研究11个具备app-in-app的apps<br>App-in-app is a new and trending mobile computing paradigm in which native app-like software modules, called sub-apps, are hosted by popular mobile apps such as Wechat, Baidu, TikTok and Chrome, to enrich the host app’s functionalities and to form an “all-in-one app” ecosystem. Sub-apps access system resources through the host, and their functionalities come close to regular mobile apps (taking photos, recording voices, banking, shopping, etc.). Less clear, however, is whether the host app, typically a third-party app, is capable of securely managing sub-apps and their access to system resources. In this paper, we report the first systematic study on the resource management in app-in-app systems. Our study reveals high-impact security flaws, which allow the adversary to stealthily escalate privilege (e.g., accessing the camera, photo gallery, microphone, etc.) or acquire sensitive data (e.g., location, passwords of Amazon, Google, etc.). To understand the impacts of those flaws, we developed an analysis tool that automatically assesses 11 popular app-in-app platforms on both Android and iOS. Our results brought to light the prevalence of the security flaws. We further discuss the lessons learned and propose mitigation strategies.</p></blockquote><p>VAHunt: Warding Off New Repackaged Android Malware in App-Virtualization’s Clothing</p><blockquote><p>提出方法两步骤检测以va方式进行repkg应用进行免杀，并且large-scale测试，这个数据是安天给的…或许可以考虑和奇安信安天安恒这些合作？<br>Repackaging popular benign apps with malicious payload used to be the most common way to spread Android malware. Nevertheless, since 2016, we have observed an alarming new trend to Android ecosystem: a growing number of Android malware samples abuse recent app-virtualization innovation as a new distribution channel. App-virtualization enables a user to run multiple copies of the same app on a single device, and tens of millions of users are enjoying this convenience. However, cybercriminals repackage various malicious APK files as plugins into an app-virtualization platform, which is flexible to launch arbitrary plugins without the hassle of installation. This new style of repackaging gains the ability to bypass anti-malware scanners by hiding the grafted malicious payload in plugins, and it also defies the basic premise embodied by existing repackaged app detection solutions.<br>As app-virtualization-based apps are not necessarily malware, in this paper, we aim to make a verdict on them prior to run time. Our in-depth study results in two key observations: 1) the proxy layer between plugin apps and the Android framework is the core of app-virtualization mechanism, and it reveals the feature of finite state transitions; 2) malware typically loads plugins stealthily and hides malicious behaviors. These insights motivate us to develop a two-layer detection approach, called VAHunt. First, we design a stateful detection model to identify the existence of an app-virtualization engine in APK files. Second, we perform data flow analysis to extract fingerprinting features to differentiate between malicious and benign loading strategies. Since October 2019, we have tested VAHunt in Antiy AVL Mobile Security, a leading mobile security company, to detect more than 139K app-virtualization-based samples. Compared with the ground truth, VAHunt achieves 0.7% false negatives and zero false positive. Our automated detection frees security analysts from the burden of reverse engineering.</p></blockquote><p>Enhancing State-of-the-art Classifiers with API Semantics to Detect Evolved Android Malware（张源）</p><blockquote><p>我还是比较关注新的安卓恶意软件哪来的？<br>这个work和CCS’21那个evasion的 <em>Structural Attack against Graph Based Android Malware Detection</em> 比起来怎么样？<br>这个work做了个减缓恶意软件分类器“衰老”的 增强器<br>把进化了的恶意apps的语义相等/相同的api调用 加入到了以前最好的分类器中<br>这样就行？为什么行？怎么就naturally了….这篇文章我有大大的问号，发现了新的数据，加入到原来的或者直接继续训练模型（冻结过去的部分参数）？还是说这work想要达到的目的是在以前数据集上的表现不变，然后扩充在新数据上的表现？<br>Machine learning (ML) classifiers have been widely deployed to detect Android malware, but at the same time the application of ML classifiers also faces an emerging problem. The performance of such classifiers degrades—or called ages—significantly over time given the malware evolution(过去的分类器随时间效果降得非常快). Prior works have proposed to use retraining or active learning to reverse and improve aged models. However, the underlying classifier itself is still blind, unaware of malware evolution. Unsurprisingly, such evolution-insensitive retraining or active learning comes at a price（进行进化不敏感的refine 是因为标记巨量应用需要花费大量精力）, i.e., the labeling of tens of thousands of malware samples and the cost of significant human efforts. In this paper, we propose the first framework, called API Graph, to enhance state-of-the-art malware classifiers <strong>with the similarity information among evolved Android malware in terms of semantically-equivalent or similar API usages</strong>（回答怎么延缓“衰老”的，像是把现今的恶意apps的语义相等/相同的api调用 加入到了以前最好的分类其中）, thus naturally slowing down classifier aging. Our evaluation shows that because of the slow-down of classifier aging, APIGraph <strong>saves significant amounts of human efforts</strong> required by active learning in labeling new malware samples.</p></blockquote><h2 id="USENIX-Security-Symposium"><a href="#USENIX-Security-Symposium" class="headerlink" title="USENIX Security Symposium"></a><em>USENIX Security</em> Symposium</h2><h3 id="security-20"><a href="#security-20" class="headerlink" title="security 20"></a>security 20</h3><p>BigMAC: Fine-Grained Policy Analysis of Android Firmware</p><blockquote><p>安卓涉及许多访问控制机制，这个work关注这些机制之间的影响与交互，设计了个框架进行（对function调用）画图？<br>然后用这个框架查询：Untrust应用能影响哪些object？<br>然后说 “untrusted apps on LG being able to communicate with a kernel monitoring service”，”Samsung S8+ allowing IPC from untrusted apps to some root processes”…<br>只是算”findings”，没提到CVE<br>The Android operating system is the world’s dominant mobile computing platform. To defend against malicious applications and external attack, Android relies upon a complex combination of discretionary and mandatory access control mechanisms, including Linux capabilities, to maintain least privilege. To understand the impact and interaction between these layers, we created a framework called BIGMAC that combines and instantiates all layers of the policy together in a fine grained graph supporting millions of edges. Our model filters out paths and types not in use on actual systems that policy analysis alone would consider.<br>Unlike previous work which requires a rooted device, using only static firmware and Android domain knowledge, we are able to <strong>extract and recreate the security state of a running system</strong>, achieving a process credential recovery at best 74.7% and a filesystem DAC and MAC accuracy of over 98%. Using BIGMAC, we <strong>develop attack queries to discover sets of objects that can be influenced by untrusted applications and external peripherals</strong><br>Our evaluation against Samsung S8+ and LG G7 firmwares reveals multiple policy concerns, including untrusted apps on LG being able to communicate with a kernel monitoring service, Samsung S8+ allowing IPC from untrusted apps to some root processes, at least 24 processes with the CAP_SYS_ADMIN capability, and system_server with the capability to load kernel modules. We have reported our findings to the corresponding vendors and release BIGMAC for the community.</p></blockquote><p>FANS: Fuzzing Android Native System Services via Automated Interface Analysis（清华 张超）</p><blockquote><p>找native的漏洞很重要。。。fuzzing很流行但有挑战，<br>#star android 结合 fuzzing 狠美妙🤣，之后细看<br>前面讲挑战，后面针对挑战讲解法<br>Android native system services provide essential supports and fundamental functionalities for user apps. Finding vulnerabilities in them is crucial for Android security. Fuzzing is one of the most popular vulnerability discovery solutions, yet faces several challenges when applied to Android native system services. First, such services are invoked via a special interprocess communication (IPC) mechanism, namely binder, via service-specific interfaces. Thus, the fuzzer has to recognize all interfaces and generate interface-specific test cases automatically. Second, effective test cases should satisfy the interface model of each interface. Third, the test cases should also satisfy the semantic requirements, including variable dependencies and interface dependencies. In this paper, we propose an automated generation-based fuzzing solution FANS to find vulnerabilities in Android native system services. It first <strong>collects all interfaces in target services</strong> and <strong>uncovers deep nested multi-level interfaces to test</strong>. Then, it <strong>automatically extracts interface models</strong>, including feasible transaction code, variable names and types in the transaction data, from the abstract syntax tree (AST) of target interfaces. Further, it <strong>infers variable dependencies in transactions</strong> via the variable name and type knowledge, and <strong>infers interface dependencies</strong> via the generation and use relationship. Finally, it <strong>employs the interface models and dependency knowledge to generate sequences of transactions</strong>, which have valid formats and semantics, to test interfaces of target services. We implemented a prototype of FANS from scratch and evaluated it on six smartphones equipped with a recent version of Android, i.e., android-9.0.0_r46 , and found 30 unique vulnerabilities deduplicated from thousands of crashes, of which 20 have been confirmed by Google. Surprisingly, we also discovered 138 unique Java exceptions during fuzzing</p></blockquote><p>Towards HTTPS Everywhere on Android: We Are Not There Yet</p><blockquote><p>large-scale又出现了，谷歌出了个xml配置文件可以让app定义ta的网络安全需求？的feature，这个work就是分析这个新的feature在app上的应用情况，<br>Nowadays, virtually all mobile apps rely on communicating with a network backend. Given the sensitive nature of the data exchanged between apps and their backends, securing these network communications is of growing importance. In recent years, Google has developed a number of security mechanisms for Android apps, ranging from multiple KeyStores to the recent introduction of the new Network Security Policy, an XML-based configuration file that allows apps to define their network security posture. In this paper, we perform the first comprehensive study on these new network defense mechanisms. In particular, we present them in detail, we discuss the attacks they are defending from, and the relevant threat models. We then discuss the first large-scale analysis on this aspect. During June and July 2019, we crawled 125,419 applications and we found how only 16,332 apps adopt this new security feature. We then focus on these apps,and we uncover how developers adopt weak and potentially vulnerable network security configurations. We note that, in November 2019, Google then made the default policy stricter, which would help the adoption. We thus opted to re-crawl the same dataset (from April to June 2020) and we repeated the experiments: while more apps do adopt this new security mechanism, a significant portion of them still do not take fully advantage of it (e.g., by allowing usage of insecure protocols). We then set out to explore the root cause of these weaknesses (i.e., the why). Our analysis showed that app developers often copy-paste vulnerable policies from popular developer websites (e.g., StackOverflow). We also found that several popular ad libraries require apps to weaken their security policy, the key problem lying in the vast complexity of the ad ecosystem. As a last contribution, we propose a new extension of the Network Security Policy, so to allow app developers to embed problematic ad libraries without the need to weaken the security of their entire app.</p></blockquote><p>Cardpliance: PCI DSS Compliance of Android Applications</p><blockquote><p>又是一个针对谷歌安全策略遵守情况的分析<br>设计了个工具，然后看358个应用是否遵守<br>Smartphones and their applications have become a predominant way of computing, and it is only natural that they have become an important part of financial transaction technology. However, applications asking users to enter credit card numbers have been largely overlooked by prior studies, which frequently report pervasive security and privacy concerns in the general mobile application ecosystem. Such applications are particularly security-sensitive, and they are subject to the Payment Card Industry Data Security Standard (PCI DSS). In this paper, we <strong>design a tool called Cardpliance</strong>, which bridges the semantics of the graphical user interface with static program analysis to capture relevant requirements from PCI DSS. We use Cardpliance to study 358 popular applications from Google Play that ask the user to enter a credit card number. Overall, we found that 1.67% of the 358 applications are not compliant with PCI DSS, with vulnerabilities including improperly storing credit card numbers and card verification codes. These findings paint a largely positive picture of the state of PCI DSS compliance of popular Android applications.</p></blockquote><p>FIRMSCOPE: Automatic Uncovering of Privilege-Escalation Vulnerabilities in Pre-Installed Apps in Android Firmware</p><blockquote><p>关注pre-install app，说的有0-day？可以提权<br>发现了不能卸载的应用可能有提权漏洞， #star  设计工具（怎么设计的，可以看一下），然后发现了真实0day<br>Android devices ship with pre-installed privileged apps in their firmware — some of which are essential system components, others deliver a unique user experience — that users cannot disable（嘲讽拉满 🤣 ）. These pre-installed apps are assumed to be secure as they are handpicked or developed by the device vendors themselves rather than third parties. Unfortunately, we have identified an alarming number of Android firmware that contain privilege-escalation vulnerabilities in pre-installed apps, allowing attackers to perform unauthorized actions such as executing arbitrary commands, <strong>recording the device audio and screen, and accessing personal data to name a few.</strong>(隐私窃取就算漏洞！确信🤣) To uncover these vulnerabilities, we built FIRMSCOPE, a novel static analysis system that analyzes Android firmware to expose unwanted functionality in pre-installed apps using an efficient and practical context-sensitive, flow-sensitive, field-sensitive, and partially object-sensitive taint analysis. Our experimental results demonstrate that FIRMSCOPE significantly outperforms the state-of-the-art Android taint analysis solutions both in terms of detection power and runtime performance. We used FIRMSCOPE to scan 331,342 pre-installed apps in 2,017 Android firmware images from v4.0 to v9.0 from more than 100 Android vendors. Among them, FIRMSCOPE uncovered 850 unique privilege-escalation vulnerabilities, many of which are exploitable and 0-day.</p></blockquote><p>Automatic Hot Patch Generation for Android Kernels</p><blockquote><p>关注OEM，三方系统<br>又是关注一个谷歌修漏洞，OEM不能及时修复的问题，类似的有<br>长时间观察得出修复的时间 的 CCS’20 Deploying Android Security Updates: an Extensive Study Involving Manufacturers, Carriers, and End Users<br>对比patch列表，看看OEM到底修复没有的 CCS’20 PDiff<br>The rapid growth of the Android ecosystem has led to the fragmentation problem where a wide range of (customized) versions of Android OS exist in the market. This poses a severe security issue as it is very costly for Android vendors to fix vulnerabilities in their customized Android kernels in time. The recent development of the hot patching technique provides an ideal solution to solve this problem since it can be applied to a wide range of Android kernels without interrupting their normal functionalities. However, the current hot patches are written by human experts, which can be time consuming and error-prone. To this end, we first study the feasibility of automatic patch generation from 373 Android kernel CVEs ranging from 2012 to 2016. Then, we develop an automatic hot patch generation tool, named Vulmet, which produces semantic preserving hot patches by learning from the official patches. The key idea of Vulmet is to use the weakest precondition reasoning to transform the changes made by the official patches into the hot patch constraints. The experiments have shown that Vulmet can generate correct hot patches for 55 real-world Android kernel CVEs. The hot patches do not affect the robustness of the kernels and have low performance overhead.</p></blockquote><h3 id="security-21"><a href="#security-21" class="headerlink" title="security 21"></a>security 21</h3><p> An Investigation of the Android Kernel Patch Ecosystem</p><blockquote><p>咋又是patch，CCS’20 两篇，sec’20一篇，这又来<br>这和CCS’20 PDiff的区别是？<br>open-source projects are often reused in commercial software. Android, a popular mobile operating system, is a great example that has fostered an ecosystem of open-source kernels. However, due to the largely decentralized and fragmented nature, patch propagation from the upstream through multiple layers to end devices can be severely <strong>delayed</strong>. In this paper, we undertake a thorough investigation of the <strong>patch propagation</strong> behaviors in the entire Android kernel ecosystem. By analyzing the CVEs and patches available since the inception of the Android security bulletin, as well as open-source upstream kernels (e.g., Linux and AOSP) and hundreds of mostly binary OEM kernels (e.g., by Samsung), we find that the delays of patches are largely due to the current patching practices and the lack of knowledge about which upstream commits being security-critical. Unfortunately, we find that the gap between the first publicly available patch and its final application on end devices is often months and even years, leaving a large attack window for experienced hackers to exploit the unpatched vulnerabilities.</p></blockquote><p>Why Eve and Mallory Still Love Android: Revisiting TLS (In)Security in Android Applications</p><blockquote><p>之前有个做https的sec’20 <em>Towards HTTPS Everywhere on Android</em> 还是这个sec’20提到的配置NSC，<br>针对谷歌的这个NSC做large-scale的measurement，现在我返回看一看这和sec’20的不同？？？<br>Android applications have a long history of being vulnerable to man-in-the-middle attacks due to insecure custom TLS certificate validation implementations. To resolve this, Google deployed the Network Security Configuration (NSC), a configuration-based approach to increase custom certificate validation logic security, and implemented safeguards in Google Play to block insecure applications. In this paper, we perform a large-scale in-depth investigation of the effectiveness of these countermeasures: First, we investigate the security of 99,212 NSC settings files in 1,335,322 Google Play apps using static code and manual analysis techniques. We find that <strong>88.87% of the apps using custom NSC settings downgrade security compared to the default settings,</strong> and only 0.67% implement certificate pinning. Second, we <strong>penetrate Google Play’s protection mechanisms by trying to publish apps that are vulnerable to man-in-the-middle attacks</strong>. In contrast to official announcements by Google, we found that Play does <strong>not effectively block vulnerable apps</strong>. Finally, we performed a <strong>static code analysis study</strong> of 15,000 apps and find that 5,511 recently published apps still contain <strong>vulnerable certificate validation code</strong>. Overall, we attribute most of the problems we find to insufficient support for developers, missing clarification of security risks in official documentation, and inadequate security checks for vulnerable applications in Google Play.<br>而20年的是：<br>Nowadays, virtually all mobile apps rely on communicating with a network backend. Given the sensitive nature of the data exchanged between apps and their backends, securing these network communications is of growing importance. In recent years, Google has developed a number of security mechanisms for Android apps, ranging from multiple KeyStores to the recent introduction of the new Network Security Policy, an XML-based configuration file that allows apps to define their network security posture. In this paper, we perform the first comprehensive study on these new network defense mechanisms. In particular, we present them in detail, we discuss the attacks they are defending from, and the relevant threat models. We then discuss the first large-scale analysis on this aspect. During June and July 2019, we crawled 125,419 applications and we found how only 16,332 apps <strong>adopt this new security feature</strong>. We then focus on these apps,and we uncover how developers adopt weak and <strong>potentially vulnerable network security configurations</strong>. We note that, in November 2019, Google then made the default policy stricter, which would help the adoption. We thus opted to re-crawl the same dataset (from April to June 2020) and we repeated the experiments: while more apps do adopt this new security mechanism, a significant portion of them still <strong>do not take fully advantage of it</strong> (e.g., by allowing usage of insecure protocols). We then set out to <strong>explore the root cause</strong> of these weaknesses (i.e., the why). Our analysis showed that app developers often <strong>copy-paste vulnerable</strong> policies from popular developer websites (e.g., StackOverflow). We also found that several popular ad libraries require apps to weaken their security policy, the key problem lying in the vast complexity of the ad ecosystem. As a last contribution, <strong>we propose a new extension</strong> of the Network Security Policy, so to allow app developers to embed problematic ad libraries without the need to weaken the security of their entire app.<br>做的都是NSC但21年的更完善？？？？等会儿看看21年的有没有引用20年的这篇┗|｀O′|┛ 嗷~~</p></blockquote>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>《操作系统真象还原》笔记</title>
    <link href="/2021/12/14/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9C%9F%E8%B1%A1%E8%BF%98%E5%8E%9F/"/>
    <url>/2021/12/14/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9C%9F%E8%B1%A1%E8%BF%98%E5%8E%9F/</url>
    
    <content type="html"><![CDATA[<p>本文为《操作系统真象还原》笔记，其中入门稍有困难。</p><h1 id="入个门"><a href="#入个门" class="headerlink" title="入个门"></a>入个门</h1><p>这里配置环境会比较坑，所以写了出来。</p><h2 id="安装bochs"><a href="#安装bochs" class="headerlink" title="安装bochs"></a>安装bochs</h2><p>环境：ubuntu16.04_<strong>x64</strong></p><h3 id="最新"><a href="#最新" class="headerlink" title="最新"></a>最新</h3><p>直接在16.04里</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">apt <span class="hljs-keyword">install </span><span class="hljs-keyword">bochs </span><span class="hljs-keyword">bochs-x</span><br></code></pre></td></tr></table></figure><p>不能在19.04+里安装（不是安装不上，是后面向显存写入内容不显示）。。。不然没输出，不知道咋回事。。。</p><p>但是这个不能gdb调试, 但也不好使用gdb调试. 不说这东西不支持gdb里面的插件,就是不用插件gdb+bochs也不好用</p><p><img src="/img/cczoxitsvfxlhryr/image-20210301114226219.png" alt="image-20210301114226219"></p><h3 id="原版"><a href="#原版" class="headerlink" title="原版"></a>原版</h3><p>这里是第一个大坑</p><p>下载：<code>https://salsa.debian.org/debian/bochs/-/commits/master/</code>，选一个最近的release，不要再sourceforge上下载！！！</p><p>我选的</p><p><img src="/img/cczoxitsvfxlhryr/image-20210224215323533.png" alt="image-20210224215323533"></p><p>编译过程非常艰辛。。。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt-get install build-essential xorg-dev bison libgtk2.0-dev g++ <br></code></pre></td></tr></table></figure><p>他那书上的</p><p><img src="/img/cczoxitsvfxlhryr/image-20210224215444546.png" alt="image-20210224215444546"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">./configure \<br>--prefix=/your_path/bochs/innerdbg \<br>--enable-debugger \<br>--enable-disasm \<br>--enable-iodebug \<br>--enable-x86-debugger \<br>--with-x \<br>--with-x11<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">./configure \<br>--prefix=/root/bochsg \<br>--enable-gdb-stub \<br>--enable-disasm \<br>--enable-iodebug \<br>--enable-x86-debugger \<br>--with-x \<br>--with-x11<br></code></pre></td></tr></table></figure><p>注意书上有个\前没有空格。</p><p>install 之前 （好像不做也没有关系，编译会报一些error，但是二进制文件都生成好了。。。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir bochsdbg<br>cp -r * bochsdbg<br></code></pre></td></tr></table></figure><p>安装好之后，不要用bochs直接运行，会提示你没有命令的，我们要进入那个我们选择的安装目录。</p><p>进入安装目录下的bin，然后<code>./bximage</code></p><p><img src="/img/cczoxitsvfxlhryr/image-20210224215700382.png" alt="image-20210224215700382"></p><p>新建配置如下（和书上不一样！），然后配置也要改！！</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 第一步，首先设置 Bochs 在运行过程中能够使用的内存，本例为 32MB。</span><br><span class="hljs-comment"># 关键字为：megs</span><br><span class="hljs-attr">megs:</span> <span class="hljs-number">32</span><br><span class="hljs-comment"># 第二步，设置对应真实机器的 BIOS 和 VGA BIOS。</span><br><span class="hljs-comment"># 对应两个关键字为：romimage 和 vgaromimage</span><br><span class="hljs-attr">romimage:</span> <span class="hljs-string">file=/root/bochs/installed/share/bochs/bios.bin-1.13.0</span><br><span class="hljs-attr">vgaromimage:</span> <span class="hljs-string">file=/root/bochs/installed/share/bochs/vgabios-cirrus.bin-1.13.0</span><br><span class="hljs-comment"># 第三步，设置 Bochs 所使用的磁盘，软盘的关键字为 floppy。</span><br><span class="hljs-comment"># 若只有一个软盘，则使用 floppya 即可，若有多个，则为 floppya，floppyb…</span><br><span class="hljs-comment">#floppya: 1_44=a.img, status=inserted</span><br><span class="hljs-comment"># 第四步，选择启动盘符。</span><br><span class="hljs-comment">#boot: floppy  #默认从软盘启动，将其注释</span><br><span class="hljs-attr">boot:</span> <span class="hljs-string">disk</span> <span class="hljs-comment">#改为从硬盘启动。我们的任何代码都将直接写在硬盘上，所以不会再有读写软盘的操作。</span><br><span class="hljs-comment"># 第五步，设置日志文件的输出。</span><br><span class="hljs-attr">log:</span> <span class="hljs-string">bochs.out</span><br><span class="hljs-comment"># 第六步，开启或关闭某些功能。</span><br><span class="hljs-comment"># 下面是关闭鼠标，并打开键盘。</span><br><span class="hljs-attr">mouse:</span> <span class="hljs-string">enabled=0</span><br><span class="hljs-attr">keyboard:</span> <span class="hljs-string">keymap=/root/bochs/installed/share/bochs/keymaps/x11-pc-us.map</span><br><span class="hljs-comment"># 硬盘设置</span><br><span class="hljs-attr">ata0:</span> <span class="hljs-string">enabled=1,</span> <span class="hljs-string">ioaddr1=0x1f0,</span> <span class="hljs-string">ioaddr2=0x3f0,</span> <span class="hljs-string">irq=14</span><br><span class="hljs-comment"># 下面的是增加的 bochs 对 gdb 的支持，这样 gdb 便可以远程连接到此机器的 1234 端口调试了</span><br><span class="hljs-comment">#gdbstub: enabled=1, port=1234, text_base=0, data_base=0, bss_base=0</span><br><span class="hljs-attr">ata0-master:</span> <span class="hljs-string">type=disk,</span> <span class="hljs-string">path=&quot;hd60M.img&quot;,</span> <span class="hljs-string">mode=flat</span><br><span class="hljs-comment">################### 配置文件结束 #####################</span><br></code></pre></td></tr></table></figure><p>这样，<code>./bochs -f conf</code>才不会报错。。。</p><h2 id="关于global-h的纠正"><a href="#关于global-h的纠正" class="headerlink" title="关于global.h的纠正"></a>关于global.h的纠正</h2><p>所有版本的global应该加入</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">enum</span> &#123;</span><span class="hljs-literal">true</span>=<span class="hljs-number">1</span>,<span class="hljs-literal">false</span>=<span class="hljs-number">0</span>&#125; <span class="hljs-keyword">bool</span>;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifndef</span> NULL</span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">if</span> defined __STDC__ &amp;&amp; __STDC__</span><br><span class="hljs-meta">#  <span class="hljs-meta-keyword">define</span> NULL ((void *) 0)</span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">else</span></span><br><span class="hljs-meta">#  <span class="hljs-meta-keyword">define</span> NULL 0</span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>形式分析</title>
    <link href="/2021/11/21/%E5%BD%A2%E5%BC%8F%E7%9C%8B%E6%B3%95/"/>
    <url>/2021/11/21/%E5%BD%A2%E5%BC%8F%E7%9C%8B%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>曾经想写一个形式分析以期对个人抉择进行参考，但是苦于非科班出身且高中学的还是理科，所以整的断断续续且很艰难，到现在为止也只有个大纲。同时，因为人口是经济活动的基石，所以人口相关也是我20年底以来持续关注的话题，这也成了这份文档篇幅较多的一部分。这份文档也将是一些我和朋友长久讨论的一些话题的集合，我会持续完善这份文档，直至其成为一个决策参考。</p><p>21年9月以来，相继有很多位21级的学弟学妹来询问我学习方法、学习的意义与目的，除开方法，对于意义与目的我最后归结为：实现个人的解放。以前我对我的目标是实现个人解放只是朦胧的感觉，与他们聊天也使我自己的目标明确了。</p><p>文档暂时的大纲见右。</p><blockquote><p>Die Grenzen meiner Sprache bedeuten die Grenzen meiner Welt. —— Wittgenstein《Tractatus Logico-Philosophicus》</p><p><em>语言的边界即思想的边界</em></p></blockquote><p>我接下来想说的一定受限于有限的文字，即便我的思想已经知道了某个概念不完备、有反例、与其它概念杂糅交叉，但我无法写全，而且也不能写全，写得越多漏洞越多，所以我会用概率的思想分析、写作，省略没有必要的“大部分情况下”等等。</p><h1 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h1><p>知乎</p><p>陈浩，关于我国人口转型的认识和应对之策，中国人民银行工作论文 2021</p><p>KOREA’S ECONOMY，a publication of the Korea Economic Institute and the Korea Institute for International Economic Policy，2012</p><p>Raymond Dalio，<a href="http://www.economicprinciples.org/">Principles by Ray Dalio</a> ，2014</p><p>易富贤，2020年人口普查仿真分析，社会科学论坛 2020</p><p>杨舸，我国“十四五”时期的人口变动及重大“转变”，北京工业大学学报 2021</p><p>陈云松，无关的流动感知：中国社会“阶层固化”了吗？社会学评论 2019</p><p>OCED <a href="http://www.oecd.org/economy/united-states-economic-snapshot/">OECD Economic Surveys United States OVERVIEW</a>，2020</p><p>OECD Economic Surveys China OVERVIEW，2019</p><p>宋书杰，中国人口与宏观经济问题研究综述，人口研究 2020</p><p>Ruixue Jia, The Value of Elite Education in China, SSRN 2017</p><p>Python深度学习，图灵 2019</p><p>M <a href="http://macromicro.me/">macromicro</a></p><p>《上海交通大学学生生存手册》2008、2020</p><p>kkndme, 天涯社区, <a href="http://bbs.tianya.cn/post-house-252774-1.shtml">「2010年的房地产调控，我们收获了什么？写在房价暴涨前」</a>, 2010</p><h1 id="基础的逻辑"><a href="#基础的逻辑" class="headerlink" title="基础的逻辑"></a>基础的逻辑</h1><p>分类有些乱</p><h2 id="定义法"><a href="#定义法" class="headerlink" title="定义法"></a>定义法</h2><h2 id="分类法"><a href="#分类法" class="headerlink" title="分类法"></a>分类法</h2><p>我认为分类有两大天然的维度，宇与宙，即空间与时间。</p><h2 id="人"><a href="#人" class="headerlink" title="人"></a>人</h2><h3 id="生活的维度"><a href="#生活的维度" class="headerlink" title="生活的维度"></a>生活的维度</h3><p>定义好了人生活的维度，才能知道如何去measure生活</p><p>衣、食、住、行、医</p><h1 id="人口与繁荣"><a href="#人口与繁荣" class="headerlink" title="人口与繁荣"></a>人口与繁荣</h1><h2 id="历史上的纵向人口与繁荣比较"><a href="#历史上的纵向人口与繁荣比较" class="headerlink" title="历史上的纵向人口与繁荣比较"></a>历史上的纵向人口与繁荣比较</h2><h2 id="科技社会的转变？"><a href="#科技社会的转变？" class="headerlink" title="科技社会的转变？"></a>科技社会的转变？</h2><h1 id="2021形势"><a href="#2021形势" class="headerlink" title="2021形势"></a>2021形势</h1><p>感谢 古都大同@知乎 的统计：</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="/img/xkuiffxi/image-20211121195011292.png" alt="image-20211121195011292"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="/img/xkuiffxi/1637459767868.jpeg" alt="1637459767868"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="/img/xkuiffxi/1637461129485.jpeg" alt="1637461129485"></div><div class="group-image-wrap"><img src="/img/xkuiffxi/v2-933aeb2b4e8b60372ad79f4bceccb919_720w.jpg" alt="v2-933aeb2b4e8b60372ad79f4bceccb919_720w"></div><div class="group-image-wrap"><img src="/img/xkuiffxi/1637461137562.jpeg" alt="1637461137562"></div></div></div><h2 id="人口演变历史"><a href="#人口演变历史" class="headerlink" title="人口演变历史"></a>人口演变历史</h2><p>wikipedia</p><h3 id="计划生育-一孩政策"><a href="#计划生育-一孩政策" class="headerlink" title="计划生育 != 一孩政策"></a>计划生育 != 一孩政策</h3><h3 id="一孩政策"><a href="#一孩政策" class="headerlink" title="一孩政策"></a>一孩政策</h3><h3 id="开放二胎"><a href="#开放二胎" class="headerlink" title="开放二胎"></a>开放二胎</h3><h3 id="全面开放二胎"><a href="#全面开放二胎" class="headerlink" title="全面开放二胎"></a>全面开放二胎</h3><h3 id="开放三胎"><a href="#开放三胎" class="headerlink" title="开放三胎"></a>开放三胎</h3><h2 id="2021年人口"><a href="#2021年人口" class="headerlink" title="2021年人口"></a>2021年人口</h2><p>人口减少的元年？</p><p><img src="/img/xkuiffxi/Cache_-6a38a16f08d46e09..jpg" alt="Cache_-6a38a16f08d46e09."></p><p><img src="/img/xkuiffxi/Cache_2c12ae71d93d3a28..jpg" alt="Cache_2c12ae71d93d3a28."></p><p><img src="/img/xkuiffxi/Cache_4a29b91c6a062ad2..jpg" alt="Cache_4a29b91c6a062ad2."></p><h1 id="未富先老"><a href="#未富先老" class="headerlink" title="未富先老?"></a>未富先老?</h1><h2 id="经济机器是怎样运行的"><a href="#经济机器是怎样运行的" class="headerlink" title="经济机器是怎样运行的"></a>经济机器是怎样运行的</h2><p>Raymond Dalio，<a href="www.economicprinciples.org">Principles by Ray Dalio</a> ，2014</p><h2 id="兴，百姓苦；亡，百姓苦"><a href="#兴，百姓苦；亡，百姓苦" class="headerlink" title="兴，百姓苦；亡，百姓苦"></a>兴，百姓苦；亡，百姓苦</h2><h3 id="通货膨胀-CPI-GDP-PMI-PPI-M2-恩格尔系数-PPIRM"><a href="#通货膨胀-CPI-GDP-PMI-PPI-M2-恩格尔系数-PPIRM" class="headerlink" title="通货膨胀 CPI GDP PMI PPI M2 恩格尔系数  PPIRM"></a>通货膨胀 CPI GDP PMI PPI M2 恩格尔系数  PPIRM</h3><p>macromicro.me</p><h4 id="CPI"><a href="#CPI" class="headerlink" title="CPI"></a>CPI</h4><h5 id="定义与意义"><a href="#定义与意义" class="headerlink" title="定义与意义"></a>定义与意义</h5><p>中國居民消費價格指數（Consumer Price Index, CPI），從消費者角度反映城鄉居民所購買的生活消費品、服務項目等價格變動，統計範圍包含食品菸酒、衣著、居住、生活用品及服務、交通和通信、教育文化和娛樂、醫療保健、其他用品和服務等 8 大類、262 個基本分類的商品與服務價格，採用抽樣調查方法抽選確定調查網點，按照「定人、定點、定時」的原則，直接派人到調查地點採集原始價格。</p><p>核心消費者物價指數（Core CPI）為扣除波動較大的能源及食物後的物價水準</p><p>CPI 年增率是觀察「通貨膨脹」程度和「民眾消費購買力強弱」的重要指標，因此「穩定物價」也成為了中國人行貨幣政策最終目標之一。</p><p>當 CPI 年增率愈高 ，通膨壓力愈高，民眾消費購買力降低；反之，當 CPI 年增率愈低，通膨壓力愈低，民眾消費購買力上升。</p><p>中國居民消費者物價指數（Consumer Price Index, CPI）權重中，以食品菸酒占最大宗，其中又以豬肉比重為最大，因此豬價與居民消費者物價的連動性高。</p><p>中國豬肉價格會隨著「豬週期」變動，2006 年以來，中國大致經歷四輪「豬週期」，主要有以下特點：</p><ol><li><p>每輪豬週期基本上約三至四年，下行時間略長於上行時間，主要是因為在下行階段，利潤下行，但只要未虧損，養殖戶退出的意願不強。</p></li><li><p>. 每輪豬週期均伴隨疫病助推，但最近的豬週期相較過去明顯存在非市場化的政策因素，如環保干預。</p></li><li><p>規模化和技術進步導致需要的能繁母豬和生豬存欄量下降，因此新一輪豬週期產能恢復後對應的存欄量將低於前期。</p></li></ol><h4 id="PPI"><a href="#PPI" class="headerlink" title="PPI"></a>PPI</h4><p>中國工業生產者出廠價格（Producer Price Index for Industrial Products, PPI），從生產者角度反映全部工業產品第一次出售時出廠價格的價格變動，統計範圍包含 1638 個基本分類的 2 萬多種工業產品的價格。主要分為生產資料（採掘、原材料、加工）和生活資料（食品、衣著、一般日用品、耐用消費品）兩大類構，其中生產資料權重約為 75%、生活資料權重約為 25%。PPI 調查採取重點調查與典型調查相結合的調查方法，涉及 5 萬家以上工業企業。</p><p>PPI 年增率就是觀察企業所有工業產品出廠的價格長期趨勢變化，由於生產資料權重占比高，容易受到國際原物料價格走勢影響。PPI 價格變動一方面反映工業品需求強弱，一方面影響工業企業的利潤變化與投資意願，因此 PPI 年增率高低也反映中國工業經濟活躍程度。</p><p>當 PPI 年增率上升，表示工業品價格上升，需求轉強，有助工業企業利潤上升、投資意願轉強；反之，當 PPI 年增率下降，工業企業利潤下降、投資意願轉弱。</p><h4 id="PPIRM"><a href="#PPIRM" class="headerlink" title="PPIRM"></a>PPIRM</h4><p>中國工業生產者出廠價格（PPI）反映企業所有工業產品第一次出售時的出廠價格變化，影響企業收入變化。</p><p>中國工業生產者購進價格（PPIRM）則反映企業中間投入的原材料、燃料、動力購進的價格變化，影響企業成本變化。</p><p>透過觀察兩者年增率走勢、增速差，可以判斷企業利潤率變化方向。當 PPI、PPIRM 年增率均向上，同時兩者價差擴大，有利企業利潤改善；反之，當兩者均向下，同時價差縮小 ，則不利企業利潤改善。</p><h4 id="PMI"><a href="#PMI" class="headerlink" title="PMI"></a>PMI</h4><p>中國 PMI 原材料購進價格與出廠價格指數，皆為中國官方製造業 PMI 細項指數之一，調查企業對未來原材料購進價格與出廠價格變化的看法，因此兩者對 PPI 有較強的領先相關關係，能一定程度上領先反映未來物價走勢。</p><p>PMI 以 50 為分界點，當兩者大於 50，代表企業認為未來原材料價格、出場廠價格上升，領先反映未來物價的上升；反之，當兩者小於 50，則領先反映未來物價的下降。</p><h4 id="恩格尔系数"><a href="#恩格尔系数" class="headerlink" title="恩格尔系数"></a>恩格尔系数</h4><h4 id="货币"><a href="#货币" class="headerlink" title="货币"></a>货币</h4><p>M0 M1 M2</p><h4 id="CPI与PPI"><a href="#CPI与PPI" class="headerlink" title="CPI与PPI"></a>CPI与PPI</h4><p>CPI 除了可以反映終端消費者的需求狀況，也反映著中國下游民營企業的獲利狀況，例如電子設備、醫藥製造、食品紡織等等。而上游原物料和資源主要是被少數國企所壟斷，包括油氣開採、煤炭採礦、石油加工等等，因此 PPI 可作為國企的盈利指標。</p><h4 id="GDP-M2-CPI与通胀"><a href="#GDP-M2-CPI与通胀" class="headerlink" title="GDP M2 CPI与通胀"></a>GDP M2 CPI与通胀</h4><h3 id="最低工资、中位数收入、生活成本"><a href="#最低工资、中位数收入、生活成本" class="headerlink" title="最低工资、中位数收入、生活成本"></a>最低工资、中位数收入、生活成本</h3><p><img src="/img/xkuiffxi/20211121_003654.jpg" alt="20211121_003654"></p><p><img src="/img/xkuiffxi/f7a9-kksmnwu7024661.jpg" alt="f7a9-kksmnwu7024661"></p><h1 id="横向比较"><a href="#横向比较" class="headerlink" title="横向比较"></a>横向比较</h1><h2 id="日本"><a href="#日本" class="headerlink" title="日本"></a>日本</h2><h3 id="人口"><a href="#人口" class="headerlink" title="人口"></a>人口</h3><h3 id="经济"><a href="#经济" class="headerlink" title="经济"></a>经济</h3><h2 id="韩国"><a href="#韩国" class="headerlink" title="韩国"></a>韩国</h2><p>KOREA’ ECONOMY, 2012</p><h3 id="人口-1"><a href="#人口-1" class="headerlink" title="人口"></a>人口</h3><h3 id="经济-1"><a href="#经济-1" class="headerlink" title="经济"></a>经济</h3><h1 id="多少人口合适"><a href="#多少人口合适" class="headerlink" title="多少人口合适"></a>多少人口合适</h1><h2 id="人到底是多了还是少了？"><a href="#人到底是多了还是少了？" class="headerlink" title="人到底是多了还是少了？"></a>人到底是多了还是少了？</h2><h1 id="人工智能能带来机遇么"><a href="#人工智能能带来机遇么" class="headerlink" title="人工智能能带来机遇么?"></a>人工智能能带来机遇么?</h1><p>这里我或许应该请研究AI的同学来答。</p><h2 id="Forbes"><a href="#Forbes" class="headerlink" title="Forbes"></a>Forbes</h2><p><sup id="fnref:15" class="footnote-ref"><a href="#fn:15" rel="footnote"><span class="hint--top hint--rounded" aria-label="AI’s Effect On Productivity Now And In The Future (forbes.com)[^kkndme_fhjx]: kkndme, 天涯社区, 「2010年的房地产调控，我们收获了什么？写在房价暴涨前」, 2010">[15]</span></a></sup></p><blockquote><p>Mar 20, 2020</p><p>Professional services giant PwC claims AI could add nearly<a href="https://www.pwc.com/gx/en/issues/data-and-analytics/publications/artificial-intelligence-study.html"> $16 trillion</a> to the world economy by 2030. The consultancy group McKinsey predicts[ $13 trillion](<a href="https://www.mckinsey.com/~/media/McKinsey/Featured">https://www.mckinsey.com/~/media/McKinsey/Featured</a> Insights/Artificial Intelligence/Notes from the frontier Modeling the impact of AI on the world economy/MGI-Notes-from-the-AI-frontier-Modeling-the-impact-of-AI-on-the-world-economy-September-2018.ashx) in the same time frame. </p></blockquote><h2 id="美-Francois-Chollet（Keras-之父）"><a href="#美-Francois-Chollet（Keras-之父）" class="headerlink" title="[美] François Chollet（Keras 之父）"></a>[美] François Chollet（Keras 之父）</h2><p>虽然深度学习近年来取得了令人瞩目的成就，但人们对这一领域在未来十年间能够取得的 成就似乎期望过高。虽然一些改变世界的应用（比如自动驾驶汽车）已经触手可及，但更多的 应用可能在长时间内仍然难以实现，比如可信的对话系统、达到人类水平的跨任意语言的机器 翻译、达到人类水平的自然语言理解。我们尤其不应该把达到人类水平的通用智能（human-level general intelligence）的讨论太当回事。在短期内期望过高的风险是，一旦技术上没有实现，那 么研究投资将会停止，而这会导致在很长一段时间内进展缓慢。 这种事曾经发生过。人们曾对人工智能极度乐观，随后是失望与怀疑，进而导致资金匮乏。 这种循环发生过两次，最早始于 20 世纪 60 年代的符号主义人工智能。在早期的那些年里，人们激动地预测着人工智能的未来。马文 • 闵斯基是符号主义人工智能方法最有名的先驱和支持 者之一，他在 1967 年宣称：“在一代人的时间内……将基本解决创造‘人工智能’的问题。”三年后的 1970 年，他做出了更为精确的定量预测：“在三到八年的时间里，我们将拥有一台具有 人类平均智能的机器。”在 2016 年，这一目标看起来仍然十分遥远，遥远到我们无法预测需要 多长时间才能实现。但在 20 世纪 60 年代和 70 年代初，一些专家却相信这一目标近在咫尺（正 如今天许多人所认为的那样）。几年之后，由于这些过高的期望未能实现，研究人员和政府资金 均转向其他领域，这标志着第一次人工智能冬天（AI winter）的开始（这一说法来自“核冬天”， 因为当时是冷战高峰之后不久）。 这并不是人工智能的最后一个冬天。20 世纪 80 年代，一种新的符号主义人工智能——专 家系统（expert system）——开始在大公司中受到追捧。最初的几个成功案例引发了一轮投资热 潮，进而全球企业都开始设立人工智能部门来开发专家系统。1985 年前后，各家公司每年在这 项技术上的花费超过 10 亿美元。但到了 20 世纪 90 年代初，这些系统的维护费用变得很高，难 以扩展，并且应用范围有限，人们逐渐对其失去兴趣。于是开始了第二次人工智能冬天。 我们可能正在见证人工智能炒作与让人失望的第三次循环，而且我们仍处于极度乐观的阶 段。最好的做法是降低我们的短期期望，确保对这一技术领域不太了解的人能够清楚地知道深 度学习能做什么、不能做什么。</p><p>虽然我们对人工智能的短期期望可能不切实际，但长远来看前景是光明的。我们才刚刚开 始将深度学习应用于许多重要的问题，从医疗诊断到数字助手，在这些问题上深度学习都发挥 了变革性作用。过去五年里，人工智能研究一直在以惊人的速度发展，这在很大程度上是由于 人工智能短短的历史中前所未见的资金投入，但到目前为止，这些进展却很少能够转化为改变 世界的产品和流程。深度学习的大多数研究成果尚未得到应用，至少尚未应用到它在各行各业 中能够解决的所有问题上。你的医生和会计师都还没有使用人工智能。你在日常生活中可能也 不会用到人工智能。当然，你可以向智能手机提出简单的问题并得到合理的回答，也可以在亚 马逊网站上得到相当有用的产品推荐，还可以在谷歌相册（Google Photos）网站搜索“生日” 并立刻找到上个月你女儿生日聚会的照片。</p><p>人工智能将会帮助科学家在所有科学领域（从基因学到数学）取得突破性进展， 从而帮助人类整体向前发展。</p><p>在这个过程中，我们可能会经历一些挫折，也可能会遇到新的人工智能冬天，正如互联网 行业那样，在 1998—1999 年被过度炒作，进而在 21 世纪初遭遇破产，并导致投资停止。但我 们最终会实现上述目标。人工智能最终将应用到我们社会和日常生活的几乎所有方面，正如今 天的互联网一样。 不要相信短期的炒作，但一定要相信长期的愿景。人工智能可能需要一段时间才能充分发 挥其潜力。这一潜力的范围大到难以想象，但人工智能终将到来，它将以一种奇妙的方式改变 我们的世界。</p><h2 id="劳动力会缺么"><a href="#劳动力会缺么" class="headerlink" title="劳动力会缺么"></a>劳动力会缺么</h2><h1 id="房地产"><a href="#房地产" class="headerlink" title="房地产"></a>房地产</h1><h2 id="「2010年的房地产调控，我们收获了什么？写在房价暴涨前」"><a href="#「2010年的房地产调控，我们收获了什么？写在房价暴涨前」" class="headerlink" title="「2010年的房地产调控，我们收获了什么？写在房价暴涨前」"></a>「2010年的房地产调控，我们收获了什么？写在房价暴涨前」</h2><p>在说房地产的时候，不得不提到我昨天看到的资料「2010年的房地产调控，我们收获了什么？写在房价暴涨前」 [^kkndme_fhjx]，这篇帖子被誉为神贴不是没有原因，当时的写作背景为[^kkndme_fhjx]：</p><blockquote><ol><li><p>全国房产成交量大幅下降</p></li><li><p>一线城市房价略有下跌，但并不持续，到现在基本跌不动了</p></li><li><p>多数二三线城市房价不跌反涨，成交量逐渐回升</p></li><li><p>大多数二线以上城市租金持续上涨</p></li><li><p>农产品价格有上涨迹象，大蒜、姜等小品种农产品遭遇爆炒。</p></li><li><p>变化莫测的政策导致精英阶层出现移民潮</p><p>@<a href="https://github.com/shengcaishizhan/kkndme_tianya#%E8%B0%83%E6%8E%A7%E5%B8%A6%E6%9D%A5%E7%9A%84%E5%BD%B1%E5%93%8D">#调控带来的影响 shengcaishizhan/kkndme_tianya: 天涯 kkndme 神贴聊房价 (github.com)</a></p></li></ol></blockquote><p>kkndme这篇文章非常长，我看了几个小时也没有看完，kkndme的有些看法与我后面【探索解放自我的路】<a href="%E6%8E%A2%E7%B4%A2%E8%A7%A3%E6%94%BE%E8%87%AA%E6%88%91%E7%9A%84%E8%B7%AF">^tjsojpfhziwodelu</a> 非常像。</p><p>这篇文章的第一个观点直接就是雷击：</p><blockquote><h3 id="1、人人都有居住权。房子是用来住的，不是用来炒的"><a href="#1、人人都有居住权。房子是用来住的，不是用来炒的" class="headerlink" title="1、人人都有居住权。房子是用来住的，不是用来炒的"></a>1、人人都有居住权。房子是用来住的，不是用来炒的</h3><p>其实这是一个伪命题。房子包括房屋及房屋所属的土地两个部分。房屋本身只有居住价值；而土地所具备稀缺性，决定了土地的投资价值。房地产贵的不是房屋，而是房屋下面那块地皮。所以商品房具备了投资与自住双重属性。</p><p>任志强说的并没有错，居者有其屋并不等于人人享有商品房的产权。居住的房屋也不等于商品房。</p><blockquote><p><strong>liougehooa：</strong></p><p>“任志强说的并没有错，居者有其屋并不等于人人享有商品房的产权。居住的房屋也不等于商品房。” 任志强这句话绝对没说炒房价，房子在他眼里还是住的。 难道你用byt是你老er比较稀缺才买？那也没看见byt暴涨到5W一个。 ”而土地所具备稀缺性？“任志强也说了，拿出全国耕地的1%也够老百姓住了！现在是啥科技了，舍掉1%耕地对农作物有什么影响？</p><p><strong>kkndme：</strong></p><p>华北平原从河北到山东有大片的盐碱地，你都可以用于盖房，而且会非常便宜，也没有人跟你竞价。但是你在那里盖了房子并不能保证你天天按时在北京城区上班。</p></blockquote></blockquote><p>从我上本科开始，陆陆续续听到“房住不炒”，行吧那就不抄，可是这的开头直接从商品组成将“房住不炒”给否了，当然，这里的房指的是 商品房。或许 房子的价值是建造这些房子的原材料人工成本，而房子的使用价值则包含了这个土地的价值。</p><p>所以现在一定要时时刻刻记住房子更重要的价值属性是</p><p>而文章开头是：</p><blockquote><p>2010年的房地产调控，让很多人看到了希望：让房价降得再猛烈些吧。还有人更是幸灾乐祸似的呼喊：让房地产赶紧崩盘吧。让没房子的好好看看有房子的笑话，是人生的一大快事。</p><p>但是我们是不是要仔细想想，为什么调控？调控期望得到什么样的效果？</p><ol><li>是如千千万万想买房子的人期望的那样，让人人买的起房吗？</li><li>是如千千万万的流氓无产者期望的那样，让房地产崩盘，开发商上吊，dfzf不再靠卖地实现gdp吗？</li></ol><p>2010年房价下跌已经变成了人民最急切的期望，已经高过了解决超贫困家庭的温饱问题，已经超过了子女教育，医疗和养老。并且为房地产必须下降提出了若干义正言辞理由，总结下来无外乎三条：</p><ol><li>人人都有居住权。房子是用来住的，不是用来炒的。</li><li>房子太贵了，租售比严重不合理，空置率太高，人均收入太低，早晚要崩盘。</li><li>房价上涨造成物价上涨，人民生活变得困难。</li></ol></blockquote><p>这三个2010年“义正言辞理由”，放到2022年，依然还是这样，甚至直接预言了“房住不炒”。</p><blockquote><h2 id="历史上买房最好的朝代"><a href="#历史上买房最好的朝代" class="headerlink" title="历史上买房最好的朝代"></a>历史上买房最好的朝代</h2><p>历朝历代，哪朝买房最容易呢？</p><p>南北朝最不靠谱，贫富相差极为悬殊，普通居民收入只有几千，房价则是几百万。谢灵运那样的大财阀“左江右湖，南北二山”，房价都被他们给炒上去了。</p><p>唐朝不用说啊，我们都知道“居长安，大不易”，而且士大夫时兴攀比，为了写诗题名好看，非得有个别墅不行。比如王维有辋川别业，岑参有南溪别业，杜牧有樊川别业，就是白居易本人，后来也在洛阳买了十七亩地，修了个“履道园”。</p><p>宋朝文人叶梦得说：“人未有无产而致富者也。有好便田产，可买则买之……勿计厚值。”这话一再被地主老财们重复。有点闲钱，买房子置地，不惜一切代价。</p><p>明代买房也不是件容易事。《金瓶梅》第五十六回，西门庆的结义兄弟要买房，朋友帮他算了算帐，“一间门面，一间客座，一间床房，一间厨灶——四间房子是少不得的。论着价银，也得三四千多银子”。小户型房子，要三四千两银子。而清河县县令，从七品国家公务员，每年薪水不过三百五十两。就是说，就算县长去买房，如果不贪污的话，需要十年不吃不喝才能攒够房钱。明代楼市虚火上延，与攀比之风分不开。尽管明太祖规定，任何人不得超越等级建房，例如居民门窗不得使用朱红油漆；庶民住房不得超过三间；功臣宅邸两边可以保留五丈空地；军民房屋不许建成五间或九间；寺观庵院不得使用斗拱。但如小说里所说，庶民西门庆“现住着门面五间到底七进的房子”，超标超大发了。</p><p>嘉靖年间，大家纷纷打肿脸充胖子，浙江人的房子必须带客厅了，江西人的房子必须带兽头了，江苏人的房子里必须摆上时尚家具和精美古玩了。明朝中叶，北京的地皮已经涨到每亩纹银两千两，就是折成人民币也有好几十万。</p></blockquote><p>历史上买房最好的朝代 说的 难道是2010年？</p><blockquote><h2 id="普通人买房的未来"><a href="#普通人买房的未来" class="headerlink" title="普通人买房的未来"></a>普通人买房的未来</h2><blockquote><p><strong>baiyang11112010：</strong></p><p>直白说，我刚毕业一年，完全靠着父母资助，要完全靠自己根本买不起房，我一些同学在北京两人的话年薪也就15万左右吧，现在好歹还能惦念着买房，要是像您所说，“北四环西四环东四环达到5万，北五环西五环外到达3万应该不是什么难事”，那他们根本就没有盼头了，这是很可怕的事啊</p><p><strong>kkndme：</strong></p><p>将来年薪20万的中产阶层一定连北京6环内的房子都买不起。这一天，不会很远。</p></blockquote></blockquote><p>2010谈房价的决定因素</p><blockquote><h2 id="精英人群的平均收入决定房价"><a href="#精英人群的平均收入决定房价" class="headerlink" title="精英人群的平均收入决定房价"></a>精英人群的平均收入决定房价</h2><blockquote><p><strong>skysurfer2208：</strong></p><p>想请教一下楼主，对于很多的二线城市，比如武汉，市区房子的均价一万左右了，但当地的平均收入一般也就3000左右吧，难倒你不认为现在的房价里面有泡沫吗？特别是现在正处在调控期，对于我们这些近年打算买房的来说，是在等等看呢还是在在这个时期出手？多谢楼主</p><p><strong>kkndme：</strong></p><p>你所说的平均收入是什么概念？是人人都挣3000块，还是有人挣2000块，有人挣1万块。武汉的房价，要看湖北省包括各地市的人口，家庭收入上万的人有多少，如果你认为很少，几乎没有，那房价肯定存在泡沫。如果湖北省有20%的人口家庭月收入超过万元，那么武汉市区的房价就没有泡沫。</p></blockquote></blockquote><p>举反例+反驳</p><blockquote><h2 id="内地不是香港、海南"><a href="#内地不是香港、海南" class="headerlink" title="内地不是香港、海南"></a>内地不是香港、海南</h2><p><a href="https://zhuanlan.zhihu.com/p/398317680">98年香港血战索罗斯全记录（深度好文） - 知乎 (zhihu.com)</a></p><blockquote><p><strong>johny__：</strong></p><p>那香港97年的时候还不是一样跌了一大截，按LZ的说法，1）土地资源很稀缺；2）作为消费群体的白领收入也能买房；3）作为世界城市，更是汇聚了世界级精英的购买力，仿佛现在上海。最后，不是一样大跌？？中产都成了负资产了。就连林百欣的儿子林建岳97年以69亿港元高价购入中环富丽华，还不是赔得一塌糊涂。</p><p>楼价涨高了就要跌，哪都不例外，这个才是规律。什么通涨，精英购买力决定房价，都是涨了之后在找理由。</p><p><strong>kkndme：</strong></p><p>这就是体制上的不同啊，所以我们无法重复香港和日本。97年的金融风暴，还是中国以国家之力对抗索罗斯的量子基金，保住了香港，这种行为在西方国家是难以想象的。一个国家动用全国人民的外汇储备与美国的民间资本打一场战争，这是令全世界震惊的。索罗斯因为不了解中国的体制，悻悻而归。</p><p>人民币不能在世界流通，依照我国实行的货币制度，货币只不过是一种符号。如果有一天我们的人民币能够自由兑换，香港发生的事也一定会发生在我们身上，但你认为我们的人民币能够自由兑换吗？</p><p><strong>johny__：</strong></p><p>那92年的海南崩盘有从何说起？从7000多掉到了几百元，这难道是海南体制？发币行是海南银行？同样是国内，同样的外汇管理制度，不是日本也不是香港，是中国海南。</p><p>–据《中国房地产市场年鉴（1996）》统计，1988年，海南商品房平均价格为1350元/平方米，1991年为1400元/平方米，1992年猛涨至5000元/平方米，1993年达到7500元/平方米的顶峰。短短三年，增长超过4倍。</p><p>–海峡对岸的北海，沉淀资金甚至高达200亿元，烂尾楼面积超过了三亚，被称为中国的“泡沫经济博物馆”。</p><p>[经验交流]92年海南房地产泡沫始自于“击鼓传花”(转载) <a href="http://www.tianya.cn/publicforum/content/house/1/163988.shtml">http://www.tianya.cn/publicforum/content/house/1/163988.shtml</a></p><p><strong>kkndme：</strong></p><p>全国的资金去炒海南、北海，炒的纯粹是概念，没有实体的支撑，就是一种博傻游戏。今年年初海南房地产的爆炒，同样积聚了巨大的风险。买房并不是全无风险，好比通州、燕郊，经历疯狂的炒作一定会理性的回归。但是如果指望北京四环内房价下跌，也只是痴心妄想。</p><p>房产投资也不是随便买套房就只涨不跌，比如说山东乳山的房子，开发商疯狂炒作旅游地产概念，但如果真的想投资升值，那就成了天大的笑话，因为根本无法变现。</p><p>什么样的房产适合投资，投资者不是傻子，都会有理性的判断。</p><p>90年代初的强硬调控让海南和北海的经济崩盘，对全国来说不可怕，毕竟只是一隅之地，但是如果用粗暴手段搞崩了全国，zf一定会好好掂量的。</p></blockquote></blockquote><blockquote><h2 id="不要低估通货膨胀"><a href="#不要低估通货膨胀" class="headerlink" title="不要低估通货膨胀"></a>不要低估通货膨胀</h2><blockquote><p><strong>someway2010：</strong></p><p>跟楼主请教一下： 楼主怎么看知春里小区的房子？那边连着双榆树小区，有大片的老房子，都是6层的板楼，都是上世纪8、90年代建的。环境看起来有点乱，以前的老公房，原单位早就没了，物业基本等于没有。将来拆迁的可能性有多大？值得买不？</p><p><strong>kkndme:：</strong></p><p>只要是4环内保值升值不会有问题，那个位置还是可以。关键是看投资还是自住，如果是自住，我就觉得那边有点乱糟糟的，不舒服。挨着中关村其实住着都不舒服，但不耽误升值。</p><p><strong>someway2010：</strong></p><p>多谢楼主，是自住<del>因为老公在中关村上班，想离公司近些，所以就挑了那里</del>是挺乱的，唉~ 希望以后等我们有钱了能换个别的地方的大房子，不过按照楼主的分析这个是极有可能实现不了了。。。5555~~~~~~ 再问一个，现在市场上卖200w的房子，十年后大概会涨到多少钱？麻烦楼主</p><p><strong>kkndme:：</strong></p><p>80年代你想象不出以后一瓶茅台会卖1000块 现在你同样想象不出十年后你的房子能卖多少钱。 那时也许人民币都是1000块一张的</p></blockquote></blockquote><blockquote><h2 id="中国的房地产不可能软着陆"><a href="#中国的房地产不可能软着陆" class="headerlink" title="中国的房地产不可能软着陆"></a>中国的房地产不可能软着陆</h2><p>中国的房地产不可能软着陆，甚至也不可能出现日本的硬着陆。一旦积蓄的问题爆发，会直接崩，崩的绝不会只是房地产。那时候绝对没有人会关心房价，很多人将庆幸于当天能够勉强填饱肚子，但绝不奢望还能见到第二天的日出。</p><blockquote><p><strong>xiangshangpa</strong></p><p>请教楼主，如果出现您说的大部分老百姓勉强甚至不能填饱肚子，房价没人关心的时候，也就是社会动荡的时候，作为您这样的中产以上的阶级，还没有移民，如何自保？我很感兴趣，谢谢！祝中秋快乐！</p><p><strong>kkndme</strong></p><p>这种事要静观其变，所谓山雨欲来风满楼，发生之前一定会有大的征兆。 自保是没**有办法的，只能看形势不对，脚底抹油。</p><p><strong>xxx</strong></p><p>按照我的理解，在发生很大征兆之前，党国就会采取措施，实施闭关锁国政策（倒回50年代），跑是跑不掉的，如果大量难民出去，也没有几个国家会接受，中产，富裕阶层也不例外，现在很多国家已经提高移民门槛了，我对这种情况的出现感到悲观，调适空间十分有限，权贵集团真的是永远无法满足，唉</p><p><strong>kkndme</strong></p><p>呵呵，人的命，天注定，自求多福吧。</p><p><strong>中年不惑吗</strong></p><p>我倒没有kkndme兄那么悲观</p><p>去看看美国20世纪30年代的新闻和文章</p><p>也是一片哀嚎</p><p>资本主义已经完蛋了，无可救药了</p><p>贫富差距太大，老百姓活不下去了</p><p>美国当时的知识界很多人都是向往苏俄模式的</p><p>左倾的名流非常多（包括卓别林和爱因斯坦等等）</p><p>即使到了20世纪50年代，美国还要搞麦卡锡主义</p><p>也说明了当年左倾很有市场</p><p>现在了，苏俄成为历史，资本主义反倒越活越精神了</p><p>还有就是如果在南北战争的时候想象一个黑人能当总统</p><p>人家肯定说你是凡尔纳</p><p>就是马丁路德的时候</p><p>也只是奢望能给黑人争取公平和权益 　　 社会进步总是靠人推进的</p><p>可以是谭嗣同蔡锷，也可以是邹容和陈天华</p><p>何必太悲观了</p><p>难道不是事在人为吗 　　 自己都不努力改变</p><p>怎么能埋怨前辈的选择错误不作为了</p></blockquote></blockquote><h2 id="房产税"><a href="#房产税" class="headerlink" title="房产税"></a>房产税</h2><p>不得不说kkndme的判断非常准，ta在2010年出了“史上最严调控”之后不仅说了<strong>房价必涨</strong>并且对<strong>房产税持保留态度</strong>。</p><h1 id="教育"><a href="#教育" class="headerlink" title="教育"></a>教育</h1><h2 id="双减"><a href="#双减" class="headerlink" title="双减"></a>双减</h2><h1 id="医疗"><a href="#医疗" class="headerlink" title="医疗"></a>医疗</h1><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p><img src="/img/xkuiffxi/7423-kksmnwu7024220.png" alt="7423-kksmnwu7024220"></p><p><img src="/img/xkuiffxi/c9fd-kksmnwu7024119.png" alt="c9fd-kksmnwu7024119"></p><h2 id="计算机还能飞多久"><a href="#计算机还能飞多久" class="headerlink" title="计算机还能飞多久"></a>计算机还能飞多久</h2><h1 id="探索解放自我的路"><a href="#探索解放自我的路" class="headerlink" title="探索解放自我的路"></a>探索解放自我的路</h1><p>分析如此多的内容，重点还是需要落在“探索自我解放的路”这个核心上。</p><h2 id="阶级，阶级！"><a href="#阶级，阶级！" class="headerlink" title="阶级，阶级！"></a>阶级，阶级！</h2><h3 id="什么叫阶级-Social-Class"><a href="#什么叫阶级-Social-Class" class="headerlink" title="什么叫阶级(Social Class)"></a>什么叫阶级(Social Class)</h3><p>从时间序即历史发展的角度看人类社会，史前自给自足，后来分工越来越细化，人就慢慢成了“人”的一部分（“脑”、“手”、“脚”）。在我现在的认知中，如果还在从事简单重复劳动（即狭义的工农），那么会处于这个金字塔的底层。</p><p>在AI+机器人没有取代简单重复劳动的时代，总有人要去充当“手”、“脚”…而 这样的“手”、“脚”具有代际传递性(并不是说“手”的后代只能是“手”)…而“大脑”不负责生产，只负责管理、消耗。这样就形成了阶级。</p><p>所以这里我简单地以产品按照时间序（资源的生产者与分配者）来划分了阶级。比如，货车司机算分配者还是生产者，按照之前粗略的理论，就可以将货车司机抽象为“脚”。</p><p>那相应的，产品按照空间序如何划分呢？上面的真是按照纯时间序来的么？</p><blockquote><p><a href="https://en.wikipedia.org/wiki/Social_class">Social class - Wikipedia</a></p><p>“Class” is a subject of analysis for <a href="https://en.wikipedia.org/wiki/List_of_sociologists">sociologists</a>, <a href="https://en.wikipedia.org/wiki/Political_scientist">political scientists</a>, <a href="https://en.wikipedia.org/wiki/Anthropologists">anthropologists</a> and <a href="https://en.wikipedia.org/wiki/Social_history">social historians</a>. The term has a wide range of sometimes conflicting meanings, and there is <strong>no broad consensus</strong> on a definition of “class”. </p></blockquote><p>两个class非常的粗略，跨越阶级必定还需要更加细化的分类，这个留给以后进行慢慢完善（好像所有章都没有比较完善</p><p>马哲的阶级概念（百度百科）：</p><blockquote><p><a href="https://baike.baidu.com/item/%E9%A9%AC%E5%85%8B%E6%80%9D%E4%B8%BB%E4%B9%89/239051">马克思主义</a>对阶级最经典的定义来自<a href="https://baike.baidu.com/item/%E5%88%97%E5%AE%81/30258">列宁</a>：“所谓阶级，就是这样一些大的集团，在<strong>社会劳动组织</strong>中所起的作用不同，因而领得自己所支配的那份<a href="https://baike.baidu.com/item/%E7%A4%BE%E4%BC%9A%E8%B4%A2%E5%AF%8C/7015304">社会财富</a>的方式和数量也不同。所谓阶级，就是这样一些集团，由于它们在一定<a href="https://baike.baidu.com/item/%E7%A4%BE%E4%BC%9A%E7%BB%8F%E6%B5%8E%E7%BB%93%E6%9E%84/6972976">社会经济结构</a>中所处的地位不同，其中<strong>一个集团能够占有另一个集团的劳动</strong>。</p><blockquote><p><strong>社会财富</strong>是指劳动者在生产过程中创造的、具有对人有使用价值的劳动产品；是指进入社会生产、生活领域具有使用价值和价值的物质。</p></blockquote></blockquote><p>Weberian：</p><blockquote><p>Main article: <a href="https://en.wikipedia.org/wiki/Three-component_theory_of_stratification">Three-component theory of stratification</a></p><p><a href="https://en.wikipedia.org/wiki/Max_Weber">Max Weber</a> formulated a <a href="https://en.wikipedia.org/wiki/Three-component_theory_of_stratification">three-component theory of stratification</a> that saw social class as emerging from an interplay between “class”, “status” and “power”. Weber believed that class position was determined by a person’s relationship to the means of production, while status or “Stand” emerged from estimations of honor or prestige.</p><p>Weber derived many of his key concepts on social stratification by examining the social structure of many countries. He noted that contrary to Marx’s theories, stratification was based on <strong>more than simply ownership of <a href="https://en.wikipedia.org/wiki/Capital_(economics)">capital</a></strong>. </p><p>Weber pointed out that some members of the <strong>aristocracy lack economic wealth yet might nevertheless have political power</strong>. Likewise in Europe, many wealthy Jewish families lacked prestige and honor because they were considered members of a “pariah group”.</p></blockquote><p>即是说Max Weber将class, status and power这三个概念作为dissect “social class”的维度。最后一段举例子说明财富少的但可能有权力而财富多的也可能是“贫民”。</p><h3 id="capital"><a href="#capital" class="headerlink" title="capital"></a>capital</h3><p>还记得我在以前背capital这个单词的时候，大写是你 资本是你 首都还是你，这都啥跟啥关联？所以后来慢慢觉得背单词慢慢演化成了从词源学了解西方文化历史的手段。</p><blockquote><p>13世纪初, “of or pertaining to the head”, 来自古法语 <em>capital</em>, 来自拉丁语 <em>capitalis</em> “of the head”, 因此是“首都, 首领, 第一”, 来自 <em>caput</em> (genitive <em>capitis</em>) “头” (来自PIE根 <a href="https://www.etymonline.com/word/*kaput-?ref=etymonline_crossreference">*kaput-</a> “头” ). 意为“主要的, 主要的, 首领的, 主导的, 重要的第一”, 来自15世纪初的英语. 现代非正式意义上的“优秀的, 第一流的” 是到1754年(作为赞叹词, OED的第一个例子是1875年), 也许是源于该词更早地用于指代船只, “第一流的, 强大的, 足以上阵的”, 从1650年代开始考证, 1918年后就被废弃了. 相关内容: <em>Capitally</em>.</p><p>A <em><strong>capital letter</strong></em> “大写的后者”, 面较大, 形式上多少有些不同(14世纪末), 因为它站在句子或单词的“头”, 所以被称为“大写的后者”. <em><strong>Capital gain</strong></em> 记载于1921年. <em><strong>Capital goods</strong></em> 是从1899年开始记录的.</p><p><em>capital</em> 犯罪或违法行为(1520年代) 是指涉及到死刑的刑罚, 从而影响到生命或“头” (<em>capital</em> 从14世纪晚期开始在英语中就有“致命的, 凡人的” 的意义, 正如它在拉丁语中的早期一样). “头” 与“生命, 死亡” 之间的感觉联系在古英语中也存在:如 <em>heafodgilt</em> “致命的罪, 死刑罪”, <em>heafdes þolian</em> “没收生命”. <em><strong>Capital punishment</strong></em> 是在布莱克斯通(1765) 和古典拉丁文 <em>capitis poena</em>.</p><p>[The term <em>capital</em> ] made its first appearance in medieval Latin as an adjective <em>capitalis</em> (from <em>caput</em>, head) modifying the word <em>pars</em>, to designate the principal sum of a money loan. The principal part of a loan was contrasted with the “usury” —later called interest—the payment made to the lender in addition to the return of the sum lent. This usage, unknown to classical Latin, had become common by the thirteenth century and possibly had begun as early as 1100 A. D. , in the first chartered towns of Europe. [Frank A. Fetter, “Reformulation of the Concepts of Capital and Income in Economics and Accounting,” 1937, in “Capital, Interest, &amp; Rent,” 1977]</p></blockquote><h3 id="跨越阶级的手段"><a href="#跨越阶级的手段" class="headerlink" title="跨越阶级的手段"></a>跨越阶级的手段</h3><p>一些“典型成功道路”</p><h4 id="高考"><a href="#高考" class="headerlink" title="高考"></a>高考</h4><p> <sup id="fnref:11" class="footnote-ref"><a href="#fn:11" rel="footnote"><span class="hint--top hint--rounded" aria-label="Ruixue Jia, The Value of Elite Education in China, SSRN 2017">[11]</span></a></sup>Ruixue Jia, The Value of Elite Education in China, SSRN 2017</p><p>并不单指高考这一个单一的考试，更在于这12年中的经历</p><p><img src="/img/xkuiffxi/image-20211121195924151.png" alt="image-20211121195924151"></p><h4 id="考研（读研）"><a href="#考研（读研）" class="headerlink" title="考研（读研）"></a>考研（读研）</h4><p>如果有考研这种理财产品，我一定买爆。</p><p><img src="/img/xkuiffxi/image-20211121195934282.png" alt="image-20211121195934282"></p><h4 id="选计算机"><a href="#选计算机" class="headerlink" title="选计算机"></a>选计算机</h4><p>指经济上能更好一些</p><h3 id="从考研-国考人数趋势看未来发展"><a href="#从考研-国考人数趋势看未来发展" class="headerlink" title="从考研/国考人数趋势看未来发展"></a>从考研/国考人数趋势看未来发展</h3><p>事实上除了考研人数，还有国考、选调人数…</p><blockquote><h2 id="体制内外-kkndme-fhjx"><a href="#体制内外-kkndme-fhjx" class="headerlink" title="体制内外 [^kkndme_fhjx]"></a>体制内外 [^kkndme_fhjx]</h2><blockquote><p><strong>tuzi1976：</strong></p><p>kkndme兄，你好。上周提了几个问题，可能你没看到，再请教一次，请抽空指点一二。 看到楼主说过“人民币对外是升值，对内贬值”，我认识到“人民币对外是升值，对内贬值”这一点也有一年多了吧，主要是从生活经历、经济新闻中得到的结论（本人学工科、不懂经济）。虽然看到了表面现象，但对其发生的根本原因、对群众生活的深刻影响、“中产阶级（勉强算是有这么个阶级）”的应对之策等等尚没有深刻的认识。楼主看到我提的这些问题恐怕也觉得范围太大、难以回答？难道体制外的“中产阶级”只有任人宰割、移民海外、钻营往上爬这几个选择？诚心求教，风险自担（呵呵，楼主也不是神仙）</p><p><strong>kkndme：</strong></p><p>普天之下莫非王土，决定了今天的土地国有 万般皆下品，也决定了以后知识分子的前途必须进入体制内。 不能考中进士的明清两代知识分子，即使经商发了大财，也一样让人看不起，不能光宗耀祖。今天的知识分子将面临同样的命运。 体制外，凭个人的本事和运气，自生自灭。</p></blockquote></blockquote><h2 id="达到什么标准才叫“解放自我”"><a href="#达到什么标准才叫“解放自我”" class="headerlink" title="达到什么标准才叫“解放自我”"></a>达到什么标准才叫“解放自我”</h2><p>🐎哲说经济基础决定上层建筑，所以首要的因素一定是经济水平。</p><p>那么什么是解放呢？英文词汇：Liberation？Emancipation？Manumit？</p><p>按照古代罗马法律，罗马人在买卖奴隶时，要举行一定的仪式。奴隶买来后，新主人把手放到奴隶身上，表示对奴隶的拥有权，这一过程在拉丁语中被称为 mancipum ，由 manus （ hand ，如单词 manual ）+ capere （ take ，如单词 capable ）构成。主人释放奴隶时，则把手从奴隶身上挪开，表示放弃对奴隶的拥有权，这一过程在拉丁语中被称为 emancipare 。除了表示释放奴隶外，还可以表示罗马家庭中的一家之主放弃对子女、妻子的父权和夫权，给予他们自由。这是因为古罗马是父系社会，妻子、子女和奴隶一样都属于男人的私有财产。</p><p>若说按照百度百科的定义：</p><blockquote><p><strong>精神方面：</strong></p><p>“精神解放”指摆脱精神的桎梏，如政治、宗教给人的<a href="https://baike.baidu.com/item/%E6%9E%B7%E9%94%81/935104">枷锁</a>。</p><p><strong>物质方面：</strong></p><p>物质解放，通过改善人民<a href="https://baike.baidu.com/item/%E7%89%A9%E8%B4%A8/661503">物质</a><a href="https://baike.baidu.com/item/%E7%94%9F%E6%B4%BB/18684">生活</a><a href="https://baike.baidu.com/item/%E6%9D%A1%E4%BB%B6/1783021">条件</a>，使人获得更多的<a href="https://baike.baidu.com/item/%E8%87%AA%E7%94%B1">自由</a>，常与生产力水平的提高相适应。如通过<a href="https://baike.baidu.com/item/%E5%B7%A5%E4%B8%9A%E9%9D%A9%E5%91%BD">工业革命</a>之后，随着机械化水平的提高，使人摆脱繁重的<a href="https://baike.baidu.com/item/%E4%BD%93%E5%8A%9B%E5%8A%B3%E5%8A%A8">体力劳动</a>，同时使人有更多时间享受物质<a href="https://baike.baidu.com/item/%E6%96%87%E6%98%8E/392">文明</a>的<a href="https://baike.baidu.com/item/%E6%88%90%E6%9E%9C/3820163">成果</a>，促进社会文化的发展。</p></blockquote><h3 id="经济水平"><a href="#经济水平" class="headerlink" title="经济水平"></a>经济水平</h3><h4 id="统计计算现在的花销"><a href="#统计计算现在的花销" class="headerlink" title="统计计算现在的花销"></a>统计计算现在的花销</h4><h5 id="小额短期"><a href="#小额短期" class="headerlink" title="小额短期"></a>小额短期</h5><h5 id="大额长期"><a href="#大额长期" class="headerlink" title="大额长期"></a>大额长期</h5><h4 id="一个人在不同阶级的中位数花销"><a href="#一个人在不同阶级的中位数花销" class="headerlink" title="一个人在不同阶级的中位数花销"></a>一个人在不同阶级的中位数花销</h4><p>要想搞清楚“不同阶级的花销”，就必须搞清楚阶级的意义、完善到底有哪些阶级。</p><h4 id="计算以资产增值获得利润cover花销需要的原始资本数"><a href="#计算以资产增值获得利润cover花销需要的原始资本数" class="headerlink" title="计算以资产增值获得利润cover花销需要的原始资本数"></a>计算以资产增值获得利润cover花销需要的原始资本数</h4><h3 id="神必因素"><a href="#神必因素" class="headerlink" title="神必因素"></a>神必因素</h3><h3 id="幸福与自我解放"><a href="#幸福与自我解放" class="headerlink" title="幸福与自我解放"></a>幸福与自我解放</h3><p>定义“幸福”：在我看来，“幸福”即是减少痛苦（苦恼等负面感受减少得越多、随心所欲的事情越多越“幸福”），这是一个长期、大概率的人生阶段的感受。</p><p>幸福是主观感受，但如果从概率论的角度看的话，那么不难得出经济解放的人的幸福指数会比没有经济解放的人高，即痛苦等负面感受会更少。</p><p>这里我暂且把“实现财富自由”即经济上的自我解放作为幸福的必要不充分条件。</p><h3 id="“自我解放”是一个门槛的突变还是渐进的变化？"><a href="#“自我解放”是一个门槛的突变还是渐进的变化？" class="headerlink" title="“自我解放”是一个门槛的突变还是渐进的变化？"></a>“自我解放”是一个门槛的突变还是渐进的变化？</h3><p>我认为是个渐进的变化，所以人与人的“自我解放”也不一样，有的“自我解放”更“令人羡慕”。</p><p>在这里我暂且把“自我解放”定为一个由经济基础、社会关系等等维度构成的高维空间。这个高维空间的维度包含了理想情况中所有的衡量。</p><p>那么如此用概率论的手段，对于任意一点x，有y的置信度（现实中无法找到全部的衡量是一个置信度，在每一个轴上亦有置信度，这里只能忽略第一个置信度）认为其进入了“自我解放”。对于z(&gt;=99%)的置信度，选取所有的点构成的空间，我认为其代表了“自我解放”的空间。即确定了“自我解放”的边界。</p><p>就是说 统计所有人认为的“个人解放”的这些维度作为样本做估计得到每一个轴的置信区间，这个空间由每个轴&gt;=99%的点构成。</p><h2 id="如今“自我解放”是以牺牲他人的“自我解放”为代价么？"><a href="#如今“自我解放”是以牺牲他人的“自我解放”为代价么？" class="headerlink" title="如今“自我解放”是以牺牲他人的“自我解放”为代价么？"></a>如今“自我解放”是以牺牲他人的“自我解放”为代价么？</h2><h3 id="是的"><a href="#是的" class="headerlink" title="是的"></a>是的</h3><p>如果按照之前对于阶级的理解，我觉得答案为“是”。一个人“解放”了自己，ta的下面，就会有供养ta的各种生产者与服务者。</p><p>前文中有提到Keras之父François Chollet在《Python深度学习》一书中写到，“ 不要相信短期的炒作，但一定要相信长期的愿景。人工智能可能需要一段时间才能充分发 挥其潜力。这一潜力的范围大到难以想象，但人工智能终将到来，它将以一种奇妙的方式改变我们的世界。”</p><p>需要注意到“长期”这个词，我们的生产相关现在有多少是智能化的？服务业呢？</p><p>至少就我目前能接触到的服务业，还是人占了绝大多数，<strong>弱AI时代应该会持续相当长的时间</strong>。</p><p>如果以“人类解放为关键词”，在百度百科上能找到：</p><blockquote><p>全人类<a href="https://baike.baidu.com/item/%E8%A7%A3%E6%94%BE/33101">解放</a>的基本条件是：<a href="https://baike.baidu.com/item/%E5%93%B2%E5%AD%A6/140608">哲学</a>、  <a href="https://baike.baidu.com/item/%E7%A7%91%E5%AD%A6/10406">科学</a>、  <a href="https://baike.baidu.com/item/%E7%94%9F%E4%BA%A7%E5%8A%9B/165852">生产力</a>、<a href="https://baike.baidu.com/item/%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF/3348043">科学技术</a>高度发展，<a href="https://baike.baidu.com/item/%E7%A4%BE%E4%BC%9A%E4%BA%A7%E5%93%81/3304007">社会产品</a>极大丰富；<a href="https://baike.baidu.com/item/%E9%98%B6%E7%BA%A7/232575">阶级</a>差别彻底<a href="https://baike.baidu.com/item/%E6%B6%88%E7%81%AD/7559548">消灭</a>，工农之间、<a href="https://baike.baidu.com/item/%E5%9F%8E%E4%B9%A1/6527916">城乡</a>之间、<a href="https://baike.baidu.com/item/%E8%84%91%E5%8A%9B%E5%8A%B3%E5%8A%A8/5943334">脑力劳动</a>和<a href="https://baike.baidu.com/item/%E4%BD%93%E5%8A%9B%E5%8A%B3%E5%8A%A8/5943464">体力劳动</a>之间的<a href="https://baike.baidu.com/item/%E5%B7%AE%E5%88%AB/716922">差别</a>逐渐<a href="https://baike.baidu.com/item/%E6%B6%88%E5%A4%B1/85038">消失</a>，<a href="https://baike.baidu.com/item/%E4%BA%BA%E4%BB%AC/876144">人们</a>在一切<a href="https://baike.baidu.com/item/%E7%A4%BE%E4%BC%9A%E7%94%9F%E4%BA%A7/8317643">社会生产</a>生活领域中实现<a href="https://baike.baidu.com/item/%E5%B9%B3%E7%AD%89/2699794">平等</a>，<a href="https://baike.baidu.com/item/%E5%8A%B3%E5%8A%A8/976265">劳动</a>不再是沉重的负担，而成为<a href="https://baike.baidu.com/item/%E7%94%9F%E6%B4%BB/18684">生活</a>的<a href="https://baike.baidu.com/item/%E7%AC%AC%E4%B8%80%E9%9C%80%E8%A6%81/22487085">第一需要</a>，实行<a href="https://baike.baidu.com/item/%E5%90%84%E5%B0%BD%E6%89%80%E8%83%BD/1177747">各尽所能</a>、<a href="https://baike.baidu.com/item/%E6%8C%89%E9%9C%80%E5%88%86%E9%85%8D/4332935">按需分配</a>的原则，作为阶级统治工具的<a href="https://baike.baidu.com/item/%E5%9B%BD%E5%AE%B6/17205">国家</a>最终<a href="https://baike.baidu.com/item/%E6%B6%88%E4%BA%A1/8104109">消亡</a>，<a href="https://baike.baidu.com/item/%E6%B0%91%E6%97%8F/665">民族</a>的<a href="https://baike.baidu.com/item/%E7%95%8C%E9%99%90/32431">界限</a>趋于<a href="https://baike.baidu.com/item/%E6%B3%AF%E7%81%AD/59289">泯灭</a>而逐渐<a href="https://baike.baidu.com/item/%E8%9E%8D%E5%90%88/72742">融合</a>为全人类的共同体，全体<a href="https://baike.baidu.com/item/%E7%A4%BE%E4%BC%9A%E6%88%90%E5%91%98/401514">社会成员</a>普遍树立起共产主义思想和<a href="https://baike.baidu.com/item/%E9%81%93%E5%BE%B7%E5%93%81%E8%B4%A8/1564250">道德品质</a>,普遍受到高质量的<a href="https://baike.baidu.com/item/%E6%95%99%E8%82%B2/143397">教育</a>,人们过着<a href="https://baike.baidu.com/item/%E9%AB%98%E5%B0%9A/4977">高尚</a>的、<a href="https://baike.baidu.com/item/%E4%B8%B0%E5%AF%8C/7116572">丰富</a>的<a href="https://baike.baidu.com/item/%E7%B2%BE%E7%A5%9E%E6%96%87%E5%8C%96/2715496">精神文化</a>生活，<a href="https://baike.baidu.com/item/%E6%99%BA%E5%8A%9B/129379">智力</a>、<a href="https://baike.baidu.com/item/%E4%BD%93%E5%8A%9B/9480397">体力</a>和<a href="https://baike.baidu.com/item/%E4%B8%AA%E6%80%A7/34168">个性</a>在同整个<a href="https://baike.baidu.com/item/%E7%A4%BE%E4%BC%9A/73320">社会</a>相<a href="https://baike.baidu.com/item/%E5%92%8C%E8%B0%90/367850">和谐</a>的前提下得到<a href="https://baike.baidu.com/item/%E8%87%AA%E7%94%B1/3954287">自由</a>的、全面的发展（见人的全面发展）。</p><p>全人类解放和无产阶级的解放是统一的过程。无产阶级所承受的剥削制度的枷锁最为沉重，因而它具有同一切<a href="https://baike.baidu.com/item/%E4%BC%A0%E7%BB%9F/879436">传统</a>的<a href="https://baike.baidu.com/item/%E6%89%80%E6%9C%89%E5%88%B6/10882497">所有制</a>关系和传统<a href="https://baike.baidu.com/item/%E8%A7%82%E5%BF%B5/1180711">观念</a>彻底<a href="https://baike.baidu.com/item/%E5%86%B3%E8%A3%82/6060">决裂</a>的<a href="https://baike.baidu.com/item/%E9%9D%A9%E5%91%BD/45662">革命</a>性，同<a href="https://baike.baidu.com/item/%E5%85%88%E8%BF%9B/282153">先进</a>的社会生产力相联系，具有<a href="https://baike.baidu.com/item/%E7%A7%AF%E6%9E%81/719619">积极</a>的<a href="https://baike.baidu.com/item/%E8%BF%9B%E5%8F%96%E7%B2%BE%E7%A5%9E/3985594">进取精神</a>和<a href="https://baike.baidu.com/item/%E4%B8%A5%E6%A0%BC/32729">严格</a>的<a href="https://baike.baidu.com/item/%E7%BB%84%E7%BB%87/10200">组织</a>纪律性。它本身没有特殊的利益，它的阶级利益同社会发展和人类进步的利益是一致的。无产阶级的<a href="https://baike.baidu.com/item/%E5%8E%86%E5%8F%B2%E4%BD%BF%E5%91%BD/6555132">历史使命</a>是解放全人类，人类解放只有通过无产阶级的解放才能实现，无产阶级只有解放全人类才能解放<a href="https://baike.baidu.com/item/%E8%87%AA%E5%B7%B1/32946">自己</a>。</p></blockquote><p>但是wikipedia上并没有关于“解放”的词条。</p><p>若按照如上定义，其中有“体力劳动”与“脑力劳动”之间的差别消失，我想这个差别包含有精神与物质两个层面（受尊重的程度、劳动所得报酬等等），但即便从物质层面看，体力劳动”与“脑力劳动”真的能够平等么？前面提到过，弱AI时代，一个人要想解放自己就</p><h3 id="解放了自己的人难道不能“反哺”ta的“下面”这些人么？"><a href="#解放了自己的人难道不能“反哺”ta的“下面”这些人么？" class="headerlink" title="解放了自己的人难道不能“反哺”ta的“下面”这些人么？"></a>解放了自己的人难道不能“反哺”ta的“下面”这些人么？</h3><p>我认为即便可以反哺，但有限度，从概率上讲：解放了自己的人不会“反哺”到令自己失去“自我解放”的经济基础。而且我觉得大部分反而会竭力维护自己的经济基础。为什么这么说，看下文。</p><h3 id="弱AI时代“个人解放”本质上是个内卷的竞争"><a href="#弱AI时代“个人解放”本质上是个内卷的竞争" class="headerlink" title="弱AI时代“个人解放”本质上是个内卷的竞争"></a>弱AI时代“个人解放”本质上是个内卷的竞争</h3><p>即只有一定百分比的人能够“个人解放”。</p><p>本来想从人均粮食产量来看， 但后来一想，应该用 粮食总产量/总工人数 而不是除以总人数 来衡量我想说的东西，但是没找到所以索性不用了。</p><p>以富士康工厂/粮食工厂等等为例，这都是需要人力去做简单重复劳动的，“自我解放”的人会去做这种简单重复劳动么？</p><p>若不是100%都能“自我解放”，那么这是一场内卷的竞争。</p><h3 id="现代“奴役”"><a href="#现代“奴役”" class="headerlink" title="现代“奴役”"></a>现代“奴役”</h3><p>什么叫“奴役”：</p><blockquote><p><strong>Slavery</strong> and <strong>enslavement</strong> are both the state and the condition of being a <strong>slave</strong>,[<a href="https://en.wikipedia.org/wiki/Slavery#cite_note-1">1]</a>[<a href="https://en.wikipedia.org/wiki/Slavery#cite_note-2">2]</a> who is someone forbidden to quit their <strong>service for another person</strong> (an enslaver) who treats that slave as their <a href="https://en.wikipedia.org/wiki/Property">property</a>.[<a href="https://en.wikipedia.org/wiki/Slavery#cite_note-3">3]</a> Slavery typically involves the enslaved person being made to perform some form of work while also having their location dictated by the enslaver. Historically, when people were enslaved, it was often because they were indebted, or broke the law, or suffered a military defeat. The duration of their enslavement might be for life, or for a fixed period of time after which their freedom was granted.[<a href="https://en.wikipedia.org/wiki/Slavery#cite_note-4">4]</a> Individuals, then, usually became slaves involuntarily, due to force or <a href="https://en.wikipedia.org/wiki/Involuntary_servitude">coercion</a>, although there was also <a href="https://en.wikipedia.org/wiki/Voluntary_slavery">voluntary slavery</a> to pay a debt or obtain money for some purpose. In the course of human history, slavery was a typical feature of <a href="https://en.wikipedia.org/wiki/Civilization">civilization</a>,[<a href="https://en.wikipedia.org/wiki/Slavery#cite_note-Slavery-5">5]</a> and legal in most societies, but it is now <a href="https://en.wikipedia.org/wiki/Abolition_of_slavery_timeline">outlawed</a> in all countries of the world, except as <a href="https://en.wikipedia.org/wiki/Penal_labor">punishment for crime</a>.[<a href="https://en.wikipedia.org/wiki/Slavery#cite_note-FOOTNOTEBales20044-6">6]</a>[<a href="https://en.wikipedia.org/wiki/Slavery#cite_note-WhiteWhite2014-7">7]</a></p><p>In <em>chattel slavery</em>, the enslaved person is legally rendered the <a href="https://en.wikipedia.org/wiki/Personal_property">personal property</a> (chattel) of the slave owner. In economics, the term <em>de facto slavery</em> describes the conditions of <a href="https://en.wikipedia.org/wiki/Unfree_labour">unfree labour</a> and <a href="https://en.wikipedia.org/wiki/Forced_labour">forced labour</a> that most slaves endure.[<a href="https://en.wikipedia.org/wiki/Slavery#cite_note-newint-8">8]</a></p></blockquote><p>如果说现代社会已经消灭了明面上的奴役，那么…</p><h3 id="天然的、无法调和的矛盾"><a href="#天然的、无法调和的矛盾" class="headerlink" title="天然的、无法调和的矛盾"></a>天然的、无法调和的矛盾</h3><h3 id="谁是敌人"><a href="#谁是敌人" class="headerlink" title="谁是敌人"></a>谁是敌人</h3><h3 id="钱重要，也不重要"><a href="#钱重要，也不重要" class="headerlink" title="钱重要，也不重要"></a>钱重要，也不重要</h3><h2 id="如何达到自我解放"><a href="#如何达到自我解放" class="headerlink" title="如何达到自我解放"></a>如何达到自我解放</h2><p>我觉得这一章能说的实在是太多，放到二级标题可能有些小了。</p><h3 id="房子可以么"><a href="#房子可以么" class="headerlink" title="房子可以么"></a>房子可以么</h3><p>详细见： <a href="%E6%88%BF%E5%9C%B0%E4%BA%A7">^fhdiij</a></p><h3 id="靠计算机大厂的工资能够实现财富自由么"><a href="#靠计算机大厂的工资能够实现财富自由么" class="headerlink" title="靠计算机大厂的工资能够实现财富自由么"></a>靠计算机大厂的工资能够实现财富自由么</h3><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>知乎<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span>陈浩，关于我国人口转型的认识和应对之策，中国人民银行工作论文 2021<a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span>KOREA’S ECONOMY，a publication of the Korea Economic Institute and the Korea Institute for International Economic Policy，2012<a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:4" class="footnote-text"><span>Raymond Dalio，<a href="http://www.economicprinciples.org/">Principles by Ray Dalio</a> ，2014<a href="#fnref:4" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:5" class="footnote-text"><span>易富贤，2020年人口普查仿真分析，社会科学论坛 2020<a href="#fnref:5" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:6" class="footnote-text"><span>杨舸，我国“十四五”时期的人口变动及重大“转变”，北京工业大学学报 2021<a href="#fnref:6" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:7" class="footnote-text"><span>陈云松，无关的流动感知：中国社会“阶层固化”了吗？社会学评论 2019<a href="#fnref:7" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:8" class="footnote-text"><span>OCED <a href="http://www.oecd.org/economy/united-states-economic-snapshot/">OECD Economic Surveys United States OVERVIEW</a>，2020<a href="#fnref:8" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:9" class="footnote-text"><span>OECD Economic Surveys China OVERVIEW，2019<a href="#fnref:9" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:10" class="footnote-text"><span>宋书杰，中国人口与宏观经济问题研究综述，人口研究 2020<a href="#fnref:10" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:11" class="footnote-text"><span>Ruixue Jia, The Value of Elite Education in China, SSRN 2017<a href="#fnref:11" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:12" class="footnote-text"><span>Python深度学习，图灵 2019<a href="#fnref:12" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:13" class="footnote-text"><span>M <a href="http://macromicro.me/">macromicro</a><a href="#fnref:13" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:14" class="footnote-text"><span>《上海交通大学学生生存手册》2008、2020<a href="#fnref:14" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:15" class="footnote-text"><span><a href="https://www.forbes.com/sites/forbestechcouncil/2020/03/20/ais-effect-on-productivity-now-and-in-the-future/?sh=2c117f387591">AI’s Effect On Productivity Now And In The Future (forbes.com)</a><br>[^kkndme_fhjx]: kkndme, 天涯社区, <a href="http://bbs.tianya.cn/post-house-252774-1.shtml">「2010年的房地产调控，我们收获了什么？写在房价暴涨前」</a>, 2010<a href="#fnref:15" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Inception</title>
    <link href="/2021/11/21/Inception/"/>
    <url>/2021/11/21/Inception/</url>
    
    <content type="html"><![CDATA[<h1 id="缘由"><a href="#缘由" class="headerlink" title="缘由"></a>缘由</h1><p>大致是第二次搞博客了，第一次（大一的暑假）是在自己的服务器上搞的博客，当时疯狂学初等数论，然后每天就把写的笔记放到了博客上。但后来服务器不维护了，博客也就放弃了，而且当时也没用hexo，所以发的文章也不是用git去管理的，麻烦。</p><p>如果是用别的托管的话，虽然知乎也能用，但是知乎上我用的是个假身份，主要是因为知乎上动态我不能设置选择性的可见，所以不想在知乎上发博客；而csdn的话，我感觉阅读起来太难受了，各种广告什么的、自由度也不高，所以大二以后就没有发博客了。</p><p>而github pages的话🇨🇳内无法直接访问(GFWed)到，所以再次搁置。之后看到了github pages + 国内可访问的<a href="https://vercel.com/">cdn分发</a>这种方式（但这个fronted framework的设计初衷应该不是bypass GFW这个目的），弄一个<a href="https://freenom.com/">免费域名</a>然后更改dns nameserver到cdn托管，<a href="https://lucxer.tech/2020/08/09/hexo-github-zeit%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/">再在cdn托管里面把github的repo链接上去</a>，这样就非常舒服了，是一个优雅的方式。</p><h1 id="博客"><a href="#博客" class="headerlink" title="博客"></a>博客</h1><p>发一些</p><ul><li>技术</li><li>感想</li><li>爱好</li><li>（或许会有经济相关）</li><li>…</li></ul><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> ollvm_base = Module.findBaseAddress(<span class="hljs-string">&quot;libhello-jni.so&quot;</span>)<br><span class="hljs-keyword">var</span> cnt = <span class="hljs-number">0</span><br><span class="hljs-keyword">if</span> (ollvm_base) &#123;<br>    <span class="hljs-keyword">var</span> ptrr = <span class="hljs-number">0x37010</span><br>    <span class="hljs-keyword">while</span> (ptrr &lt; <span class="hljs-number">0x37238</span>) &#123;<br>        <span class="hljs-comment">// console.log(ptr)</span><br><span class="hljs-comment">// 对ptrr进行ptr()非常重要</span><br>        <span class="hljs-keyword">var</span> strtmp = ptr(ptrr).add(ollvm_base).readCString()<br>        <span class="hljs-keyword">if</span> (strtmp.length != <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;[*] 0x&quot;</span> + ptr(ptrr) + <span class="hljs-string">&quot;: &quot;</span> + strtmp);<br>            <span class="hljs-comment">// console.log(strtmp.length)</span><br>        &#125;<br><br>        ptrr = ptr(ptrr).add(strtmp.length + <span class="hljs-number">1</span>) <span class="hljs-comment">//这个+1非常重要，否则会出现死循环，因为最后一个字符是&#x27;\0&#x27;不加一就永远卡在那</span><br>            <span class="hljs-comment">// console.log(ptr(ptrr))</span><br>    &#125;<br><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;[-] 获取so基址失败&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>结果</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs llvm">[*] <span class="hljs-number">0x0</span><span class="hljs-keyword">x</span><span class="hljs-number">37010</span>: Hello from JNI !  Compiled with ABI arm<span class="hljs-number">64</span>-v<span class="hljs-number">8</span>a:<br>[*] <span class="hljs-number">0x0</span><span class="hljs-keyword">x</span><span class="hljs-number">37040</span>: <span class="hljs-variable">%02</span><span class="hljs-keyword">x</span><br>[*] <span class="hljs-number">0x0</span><span class="hljs-keyword">x</span><span class="hljs-number">37050</span>: com/example/hellojni/HelloJni<br>[*] <span class="hljs-number">0x0</span><span class="hljs-keyword">x</span><span class="hljs-number">37070</span>: sign<span class="hljs-number">1</span><br>[*] <span class="hljs-number">0x0</span><span class="hljs-keyword">x</span><span class="hljs-number">37080</span>: (Ljava/lang/String<span class="hljs-comment">;)Ljava/lang/String;</span><br>[*] <span class="hljs-number">0x0</span><span class="hljs-keyword">x</span><span class="hljs-number">370</span>a<span class="hljs-number">8</span>: basic_string<br>[*] <span class="hljs-number">0x0</span><span class="hljs-keyword">x</span><span class="hljs-number">370</span><span class="hljs-keyword">c</span><span class="hljs-number">0</span>: allocator&lt;T&gt;::allocate(size_t n) &#x27;n&#x27; exceeds maximum supported size<br>[*] <span class="hljs-number">0x0</span><span class="hljs-keyword">x</span><span class="hljs-number">37108</span>: `(�Bo<br>[*] <span class="hljs-number">0x0</span><span class="hljs-keyword">x</span><span class="hljs-number">37110</span>: +++++++++<br>[*] <span class="hljs-number">0x0</span><span class="hljs-keyword">x</span><span class="hljs-number">3711</span><span class="hljs-keyword">c</span>: salt<span class="hljs-number">0</span>+<br>[*] <span class="hljs-number">0x0</span><span class="hljs-keyword">x</span><span class="hljs-number">37124</span>: salt<span class="hljs-number">1</span>+<br>[*] <span class="hljs-number">0x0</span><span class="hljs-keyword">x</span><span class="hljs-number">3712</span><span class="hljs-keyword">c</span>: salt<span class="hljs-number">2</span>+<br>[*] <span class="hljs-number">0x0</span><span class="hljs-keyword">x</span><span class="hljs-number">37138</span>: basic_string<br>[*] <span class="hljs-number">0x0</span><span class="hljs-keyword">x</span><span class="hljs-number">37150</span>: allocator&lt;T&gt;::allocate(size_t n) &#x27;n&#x27; exceeds maximum supported size<br>[*] <span class="hljs-number">0x0</span><span class="hljs-keyword">x</span><span class="hljs-number">371</span>a<span class="hljs-number">0</span>: <span class="hljs-number">7</span>�Dh�<span class="hljs-operator">=</span>��و���Z<span class="hljs-number">202</span>cb<span class="hljs-number">962</span>ac<span class="hljs-number">59075</span>b<span class="hljs-number">964</span>b<span class="hljs-number">07152</span>d<span class="hljs-number">234</span>b<span class="hljs-number">70</span><br>[*] <span class="hljs-number">0x0</span><span class="hljs-keyword">x</span><span class="hljs-number">371e0</span>: e<span class="hljs-number">10</span>adc<span class="hljs-number">3949</span>ba<span class="hljs-number">59</span>abbe<span class="hljs-number">56e057</span>f<span class="hljs-number">20</span>f<span class="hljs-number">883</span>e<br>[*] <span class="hljs-number">0x0</span><span class="hljs-keyword">x</span><span class="hljs-number">37210</span>: <span class="hljs-number">25</span>f<span class="hljs-number">9e794323</span>b<span class="hljs-number">453885</span>f<span class="hljs-number">5181</span>f<span class="hljs-number">1</span>b<span class="hljs-number">624</span>d<span class="hljs-number">0</span>b<br></code></pre></td></tr></table></figure><p>这里搞几个易错点：</p><ul><li><p><code> ptr(ptrr + ollvm_base).readCString()</code> 这种写法看似没有问题，实则有问题，因为ptrr并不能自动变成整数…</p></li><li><p><code>ptrr.add(strtmp.length)</code> 也是有问题的，因为ptrr这个东西需要经过<code>ptr()</code>才能用<code>add</code>方法</p></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
