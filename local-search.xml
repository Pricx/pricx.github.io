<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Inception</title>
    <link href="/2021/11/21/Inception/"/>
    <url>/2021/11/21/Inception/</url>
    
    <content type="html"><![CDATA[<h1 id="缘由"><a href="#缘由" class="headerlink" title="缘由"></a>缘由</h1><p>大致是第二次搞博客了，第一次（大一的暑假）是在自己的服务器上搞的博客，当时疯狂学初等数论，然后每天就把写的笔记放到了博客上。但后来服务器不维护了，博客也就放弃了，而且当时也没用hexo，所以发的文章也不是用git去管理的，麻烦。</p><p>如果是用别的托管的话，虽然知乎也能用，但是知乎上我用的是个假身份，主要是因为知乎上动态我不能设置选择性的可见，所以不想在知乎上发博客；而csdn的话，我感觉阅读起来太难受了，各种广告什么的、自由度也不高，所以大二以后就没有发博客了。</p><p>而github pages的话🇨🇳内无法直接访问(GFWed)到，所以再次搁置。之后看到了github pages + 国内可访问的<a href="https://vercel.com/">cdn分发</a>这种方式（但这个fronted framework的设计初衷应该不是bypass GFW这个目的），弄一个<a href="https://freenom.com/">免费域名</a>然后更改dns nameserver到cdn托管，<a href="https://lucxer.tech/2020/08/09/hexo-github-zeit%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/">再在cdn托管里面把github的repo链接上去</a>，这样就非常舒服了，是一个优雅的方式。</p><h1 id="博客"><a href="#博客" class="headerlink" title="博客"></a>博客</h1><p>发一些</p><ul><li>技术</li><li>感想</li><li>爱好</li><li>（或许会有经济相关）</li><li>…</li></ul><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> ollvm_base = Module.findBaseAddress(<span class="hljs-string">&quot;libhello-jni.so&quot;</span>)<br><span class="hljs-keyword">var</span> cnt = <span class="hljs-number">0</span><br><span class="hljs-keyword">if</span> (ollvm_base) &#123;<br>    <span class="hljs-keyword">var</span> ptrr = <span class="hljs-number">0x37010</span><br>    <span class="hljs-keyword">while</span> (ptrr &lt; <span class="hljs-number">0x37238</span>) &#123;<br>        <span class="hljs-comment">// console.log(ptr)</span><br><span class="hljs-comment">// 对ptrr进行ptr()非常重要</span><br>        <span class="hljs-keyword">var</span> strtmp = ptr(ptrr).add(ollvm_base).readCString()<br>        <span class="hljs-keyword">if</span> (strtmp.length != <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;[*] 0x&quot;</span> + ptr(ptrr) + <span class="hljs-string">&quot;: &quot;</span> + strtmp);<br>            <span class="hljs-comment">// console.log(strtmp.length)</span><br>        &#125;<br><br>        ptrr = ptr(ptrr).add(strtmp.length + <span class="hljs-number">1</span>) <span class="hljs-comment">//这个+1非常重要，否则会出现死循环，因为最后一个字符是&#x27;\0&#x27;不加一就永远卡在那</span><br>            <span class="hljs-comment">// console.log(ptr(ptrr))</span><br>    &#125;<br><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;[-] 获取so基址失败&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>结果</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs llvm">[*] <span class="hljs-number">0x0</span><span class="hljs-keyword">x</span><span class="hljs-number">37010</span>: Hello from JNI !  Compiled with ABI arm<span class="hljs-number">64</span>-v<span class="hljs-number">8</span>a:<br>[*] <span class="hljs-number">0x0</span><span class="hljs-keyword">x</span><span class="hljs-number">37040</span>: <span class="hljs-variable">%02</span><span class="hljs-keyword">x</span><br>[*] <span class="hljs-number">0x0</span><span class="hljs-keyword">x</span><span class="hljs-number">37050</span>: com/example/hellojni/HelloJni<br>[*] <span class="hljs-number">0x0</span><span class="hljs-keyword">x</span><span class="hljs-number">37070</span>: sign<span class="hljs-number">1</span><br>[*] <span class="hljs-number">0x0</span><span class="hljs-keyword">x</span><span class="hljs-number">37080</span>: (Ljava/lang/String<span class="hljs-comment">;)Ljava/lang/String;</span><br>[*] <span class="hljs-number">0x0</span><span class="hljs-keyword">x</span><span class="hljs-number">370</span>a<span class="hljs-number">8</span>: basic_string<br>[*] <span class="hljs-number">0x0</span><span class="hljs-keyword">x</span><span class="hljs-number">370</span><span class="hljs-keyword">c</span><span class="hljs-number">0</span>: allocator&lt;T&gt;::allocate(size_t n) &#x27;n&#x27; exceeds maximum supported size<br>[*] <span class="hljs-number">0x0</span><span class="hljs-keyword">x</span><span class="hljs-number">37108</span>: `(�Bo<br>[*] <span class="hljs-number">0x0</span><span class="hljs-keyword">x</span><span class="hljs-number">37110</span>: +++++++++<br>[*] <span class="hljs-number">0x0</span><span class="hljs-keyword">x</span><span class="hljs-number">3711</span><span class="hljs-keyword">c</span>: salt<span class="hljs-number">0</span>+<br>[*] <span class="hljs-number">0x0</span><span class="hljs-keyword">x</span><span class="hljs-number">37124</span>: salt<span class="hljs-number">1</span>+<br>[*] <span class="hljs-number">0x0</span><span class="hljs-keyword">x</span><span class="hljs-number">3712</span><span class="hljs-keyword">c</span>: salt<span class="hljs-number">2</span>+<br>[*] <span class="hljs-number">0x0</span><span class="hljs-keyword">x</span><span class="hljs-number">37138</span>: basic_string<br>[*] <span class="hljs-number">0x0</span><span class="hljs-keyword">x</span><span class="hljs-number">37150</span>: allocator&lt;T&gt;::allocate(size_t n) &#x27;n&#x27; exceeds maximum supported size<br>[*] <span class="hljs-number">0x0</span><span class="hljs-keyword">x</span><span class="hljs-number">371</span>a<span class="hljs-number">0</span>: <span class="hljs-number">7</span>�Dh�<span class="hljs-operator">=</span>��و���Z<span class="hljs-number">202</span>cb<span class="hljs-number">962</span>ac<span class="hljs-number">59075</span>b<span class="hljs-number">964</span>b<span class="hljs-number">07152</span>d<span class="hljs-number">234</span>b<span class="hljs-number">70</span><br>[*] <span class="hljs-number">0x0</span><span class="hljs-keyword">x</span><span class="hljs-number">371e0</span>: e<span class="hljs-number">10</span>adc<span class="hljs-number">3949</span>ba<span class="hljs-number">59</span>abbe<span class="hljs-number">56e057</span>f<span class="hljs-number">20</span>f<span class="hljs-number">883</span>e<br>[*] <span class="hljs-number">0x0</span><span class="hljs-keyword">x</span><span class="hljs-number">37210</span>: <span class="hljs-number">25</span>f<span class="hljs-number">9e794323</span>b<span class="hljs-number">453885</span>f<span class="hljs-number">5181</span>f<span class="hljs-number">1</span>b<span class="hljs-number">624</span>d<span class="hljs-number">0</span>b<br></code></pre></td></tr></table></figure><p>这里搞几个易错点：</p><ul><li><p><code> ptr(ptrr + ollvm_base).readCString()</code> 这种写法看似没有问题，实则有问题，因为ptrr并不能自动变成整数…</p></li><li><p><code>ptrr.add(strtmp.length)</code> 也是有问题的，因为ptrr这个东西需要经过<code>ptr()</code>才能用<code>add</code>方法</p></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
